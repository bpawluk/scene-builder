<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JeremyAnsel.DirectX.DXMath</name>
    </assembly>
    <members>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox">
            <summary>
            A bounding axis-aligned object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.CornerCount">
            <summary>
            The number of points defining the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.center">
            <summary>
            The center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.extents">
            <summary>
            The extents of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.#ctor(JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat3)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> struct.
            </summary>
            <param name="center">The coordinate of the center of the box.</param>
            <param name="extents">The extents of the box.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Center">
            <summary>
            Gets or sets the center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Extents">
            <summary>
            Gets or sets the extents of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.op_Equality(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox,JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.op_Inequality(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox,JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.CreateMerged(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox,JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> large enough to contains two specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> instances.
            </summary>
            <param name="b1">The first <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> that should be contained in the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</param>
            <param name="b2">The second <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> that should be contained in the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</param>
            <returns>The merged <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.CreateFromSphere(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> large enough to contain the a specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.CreateFromPoints(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> from two points.
            </summary>
            <param name="pt1">The first point the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> should contain.</param>
            <param name="pt2">The second point the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> containing the two specified points.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.CreateFromPoints(JeremyAnsel.DirectX.DXMath.XMFloat3[])">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> from a list of points.
            </summary>
            <param name="points">The points to create the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> from.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> containing the specified points.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Equals(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Transform(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="m">The matrix to transform the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> by.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Transform(System.Single,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="scale">The value to scale the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> by.</param>
            <param name="rotation">The value to rotate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> by.</param>
            <param name="translation">The value to translate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> by.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.GetCorners">
            <summary>
            Retrieves the corners of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <returns>The corners of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains a specified point.
            </summary>
            <param name="point">The point to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the point is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains a specified triangle.
            </summary>
            <param name="v0">The first corner of the triangle.</param>
            <param name="v1">The second corner of the triangle.</param>
            <param name="v2">The third corner of the triangle.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains the specified triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains a specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains another <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with another <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a triangle.
            </summary>
            <param name="v0">The first vector describing the triangle.</param>
            <param name="v1">The second vector describing the triangle.</param>
            <param name="v2">The third vector describing the triangle.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a plane.
            </summary>
            <param name="plane">A vector describing the plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType"/> value indicating the intersection status.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> intersects the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector[])">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> is contained by the specified frustum.
            </summary>
            <param name="planes">The planes describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> is contained by the specified frustum.
            </summary>
            <param name="plane0">The first plane describing the frustum.</param>
            <param name="plane1">The second plane describing the frustum.</param>
            <param name="plane2">The third plane describing the frustum.</param>
            <param name="plane3">The fourth plane describing the frustum.</param>
            <param name="plane4">The fifth plane describing the frustum.</param>
            <param name="plane5">The sixth plane describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum">
            <summary>
            A bounding frustum object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.CornerCount">
            <summary>
            The number of corners defining the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.origin">
            <summary>
            The origin of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.orientation">
            <summary>
            The orientation of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> represented as a quaternion.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.rightSlope">
            <summary>
            The slope of the right side of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.leftSlope">
            <summary>
            The slope of the left side of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.topSlope">
            <summary>
            The slope of the top of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.bottomSlope">
            <summary>
            The slope of the bottom of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.near">
            <summary>
            The distance of the near plane of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> from its origin.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.far">
            <summary>
            The distance of the far plane from the origin of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.#ctor(JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat4,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> struct.
            </summary>
            <param name="origin">The origin of the frustum.</param>
            <param name="orientation">The orientation of the frustum.</param>
            <param name="rightSlope">The slope of the right side of the frustum.</param>
            <param name="leftSlope">The slope of the left side of the frustum.</param>
            <param name="topSlope">The slope of the top of the frustum.</param>
            <param name="bottomSlope">The slope of the bottom of the frustum.</param>
            <param name="near">The distance of the near plane from the origin of the frustum.</param>
            <param name="far">The distance of the far plane from the origin of the frustum.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.#ctor(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> struct from a left-handed projection matrix..
            </summary>
            <param name="projection">The left-handed projection matrix to create the frustum from.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Origin">
            <summary>
            Gets or sets the origin of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Orientation">
            <summary>
            Gets or sets the orientation of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> represented as a quaternion.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.RightSlope">
            <summary>
            Gets or sets the slope of the right side of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.LeftSlope">
            <summary>
            Gets or sets the slope of the left side of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.TopSlope">
            <summary>
            Gets or sets the slope of the top of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.BottomSlope">
            <summary>
            Gets or sets the slope of the bottom of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Near">
            <summary>
            Gets or sets the distance of the near plane of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> from its origin.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Far">
            <summary>
            Gets or sets the distance of the far plane from the origin of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.op_Equality(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum,JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.op_Inequality(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum,JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.CreateFromMatrix(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> from the specified projection matrix.
            </summary>
            <param name="projection">The left-handed projection matrix to create the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> from.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Equals(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Transform(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> by the specified transformation matrix.
            </summary>
            <param name="m">The transformation matrix.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Transform(System.Single,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> using the specified scale, rotation and translation vectors.
            </summary>
            <param name="scale">The value to scale the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> by.</param>
            <param name="rotation">The value to rotate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> by.</param>
            <param name="translation">The value to translate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> by.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.GetCorners">
            <summary>
            Gets the corners making up the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <returns>The corners.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified point.
            </summary>
            <param name="point">The point to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the point is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified triangle.
            </summary>
            <param name="v0">The first corner of the triangle.</param>
            <param name="v1">The second corner of the triangle.</param>
            <param name="v2">The third corner of the triangle.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the triangle is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with another <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a triangle.
            </summary>
            <param name="v0">The first vector describing the triangle.</param>
            <param name="v1">The second vector describing the triangle.</param>
            <param name="v2">The third vector describing the triangle.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects the triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a plane.
            </summary>
            <param name="plane">A vector describing the plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType"/> value indicating the intersection status.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a ray.
            </summary>
            <param name="rayOrigin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects with the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> for intersection with a ray.
            </summary>
            <param name="rayOrigin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="dist">The length of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> intersects with the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector[])">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained by the specified frustum.
            </summary>
            <param name="planes">The planes describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained by the specified frustum.
            </summary>
            <param name="plane0">The first plane describing the frustum.</param>
            <param name="plane1">The second plane describing the frustum.</param>
            <param name="plane2">The third plane describing the frustum.</param>
            <param name="plane3">The fourth plane describing the frustum.</param>
            <param name="plane4">The fifth plane describing the frustum.</param>
            <param name="plane5">The sixth plane describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.GetPlanes(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Gets the planes making up the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="nearPlane">The near plane.</param>
            <param name="farPlane">The far plane.</param>
            <param name="rightPlane">The right plane.</param>
            <param name="leftPlane">The left plane.</param>
            <param name="topPlane">The top plane.</param>
            <param name="bottomPlane">The bottom plane.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox">
            <summary>
            An oriented bounding box object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.CornerCount">
            <summary>
            The number of points defining the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.center">
            <summary>
            The center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.extents">
            <summary>
            The extents of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.orientation">
            <summary>
            The orientation of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> represented as a quaternion.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.#ctor(JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat4)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> struct.
            </summary>
            <param name="center">The coordinates of the center.</param>
            <param name="extents">The extents.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Center">
            <summary>
            Gets or sets the center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Extents">
            <summary>
            Gets or sets the extents of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Orientation">
            <summary>
            Gets or sets the orientation of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> represented as a quaternion.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.op_Equality(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox,JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.op_Inequality(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox,JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.CreateFromBox(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> from a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.CreateFromPoints(JeremyAnsel.DirectX.DXMath.XMFloat3[])">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> from a collection of points.
            </summary>
            <param name="points">The points to create the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> from.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> containing the specified points.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Equals(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Transform(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="m">The matrix to transform the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> with.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Transform(System.Single,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="scale">The value to scale the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> by.</param>
            <param name="rotation">The value to rotate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> by.</param>
            <param name="translation">The value to translate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> by.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.GetCorners">
            <summary>
            Retrieves the corners of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <returns>The corners.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a specified point.
            </summary>
            <param name="point">The point to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether point is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a triangle.
            </summary>
            <param name="v0">The first vector describing the triangle.</param>
            <param name="v1">The second vector describing the triangle.</param>
            <param name="v2">The third vector describing the triangle.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether triangle is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> contains a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a triangle.
            </summary>
            <param name="v0">The first vector describing the triangle.</param>
            <param name="v1">The second vector describing the triangle.</param>
            <param name="v2">The third vector describing the triangle.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a plane.
            </summary>
            <param name="plane">A vector describing the plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType"/> value indicating the intersection status.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> intersects the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector[])">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained by a frustum.
            </summary>
            <param name="planes">The planes describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained by a frustum.
            </summary>
            <param name="plane0">The first plane describing the frustum.</param>
            <param name="plane1">The second plane describing the frustum.</param>
            <param name="plane2">The third plane describing the frustum.</param>
            <param name="plane3">The fourth plane describing the frustum.</param>
            <param name="plane4">The fifth plane describing the frustum.</param>
            <param name="plane5">The sixth plane describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere">
            <summary>
            A bounding sphere object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.center">
            <summary>
            The center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.radius">
            <summary>
            The radius of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.#ctor(JeremyAnsel.DirectX.DXMath.XMFloat3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Center">
            <summary>
            Gets or sets the center of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Radius">
            <summary>
            Gets or sets the radius of the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.op_Equality(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere,JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.op_Inequality(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere,JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.CreateMerged(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere,JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> that contains the two specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> objects.
            </summary>
            <param name="s1">The first <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> that the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> should contain.</param>
            <param name="s2">The second <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> that the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> should contain.</param>
            <returns>A new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> containing the two specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> objects.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.CreateFromBox(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> containing the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.CreateFromOrientedBox(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> containing the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.CreateFromPoints(JeremyAnsel.DirectX.DXMath.XMFloat3[])">
            <summary>
            Creates a new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> from a list of points.
            </summary>
            <param name="points">The points to create the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> from.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> containing the specified points.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.CreateFromFrustum(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> containing the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> the new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> should contain.</param>
            <returns>The new <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Equals(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Transform(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="m">The transformation matrix.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Transform(System.Single,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Transforms the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> using the specified scale, rotation and translation vectors.
            </summary>
            <param name="scale">The value to scale the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> by.</param>
            <param name="rotation">The value to rotate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> by.</param>
            <param name="translation">The value to translate the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> by.</param>
            <returns>The transformed <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains a specified point.
            </summary>
            <param name="point">The point to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified point.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains a specified triangle.
            </summary>
            <param name="v0">The first corner of the triangle.</param>
            <param name="v1">The second corner of the triangle.</param>
            <param name="v2">The third corner of the triangle.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains a specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains a specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Contains(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test against.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> is contained in the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.
            </summary>
            <param name="sh">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> to test against.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingBox)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/> to test against.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.
            </summary>
            <param name="box">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum)">
            <summary>
            Test the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.
            </summary>
            <param name="fr">The <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/> to test for intersection.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a triangle.
            </summary>
            <param name="v0">The first corner of the triangle.</param>
            <param name="v1">The second corner of the triangle.</param>
            <param name="v2">The third corner of the triangle.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified triangle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a plane.
            </summary>
            <param name="plane">A vector describing the plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType"/> value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> intersects the specified plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@)">
            <summary>
            Tests the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> for intersection with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="distance">The length of the ray.</param>
            <returns>A boolean value indicating whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> contains the specified ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector[])">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> is contained by the specified frustum.
            </summary>
            <param name="planes">The planes describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/> is contained by the specified frustum.
            </summary>
            <param name="plane0">The first plane describing the frustum.</param>
            <param name="plane1">The second plane describing the frustum.</param>
            <param name="plane2">The third plane describing the frustum.</param>
            <param name="plane3">The fourth plane describing the frustum.</param>
            <param name="plane4">The fifth plane describing the frustum.</param>
            <param name="plane5">The sixth plane describing the frustum.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the frustum contains the <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants">
            <summary>
            Global constants for collision.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants.BoxOffsets">
            <summary>
            The offsets of a box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants.RayEpsilon">
            <summary>
            The ray epsilon vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants.RayNegEpsilon">
            <summary>
            The ray negative epsilon vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants.FltMin">
            <summary>
            The min vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.CollisionGlobalConstants.FltMax">
            <summary>
            The max vector.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType">
            <summary>
            Indicates whether an object contains another object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType.Disjoint">
            <summary>
            The object does not contain the specified object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType.Intersects">
            <summary>
            The objects intersect.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType.Contains">
            <summary>
            The object contains the specified object.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.Internal">
            <summary>
            Internal routines for collision.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.Internal.UnitVectorEpsilon">
            <summary>
            The unit epsilon vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.Internal.UnitQuaternionEpsilon">
            <summary>
            The unit epsilon quaternion.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.Internal.UnitPlaneEpsilon">
            <summary>
            The unit epsilon plane.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMVector3AnyTrue(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return true if any of the elements of a 3 vector are equal to 0xffffffff.
            Slightly more efficient than using <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector3.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMVector3AllTrue(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return true if all of the elements of a 3 vector are equal to 0xffffffff.
            Slightly more efficient than using <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector3.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMVector3IsUnit(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return true if the vector is a unit vector (length == 1).
            </summary>
            <param name="v">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMQuaternionIsUnit(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return true if the quaternion is a unit quaternion.
            </summary>
            <param name="q">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMPlaneIsUnit(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return true if the plane is a unit plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.XMPlaneTransform(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Transforms a plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">A rotation.</param>
            <param name="translation">A translation.</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.PointOnLineSegmentNearestPoint(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Return the point on the line segment (S1, S2) nearest the point P.
            </summary>
            <param name="s1">The first point describing the line.</param>
            <param name="s2">The second point describing the line.</param>
            <param name="p">The point.</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.PointOnPlaneInsideTriangle(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test if the point (P) on the plane of the triangle is inside the triangle (V0, V1, V2).
            </summary>
            <param name="p">The point.</param>
            <param name="v0">The first point of the triangle.</param>
            <param name="v1">The second point of the triangle.</param>
            <param name="v2">The third point of the triangle.</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.SolveCubic(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Solves a cubic equation.
            </summary>
            <param name="e">The e parameter.</param>
            <param name="f">The f parameter.</param>
            <param name="g">The g parameter.</param>
            <param name="t">The t parameter.</param>
            <param name="u">The u parameter.</param>
            <param name="v">The v parameter.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.CalculateEigenVector(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates eigen vector.
            </summary>
            <param name="m11">The m11 parameter.</param>
            <param name="m12">The m12 parameter.</param>
            <param name="m13">The m13 parameter.</param>
            <param name="m22">The m22 parameter.</param>
            <param name="m23">The m23 parameter.</param>
            <param name="m33">The m33 parameter.</param>
            <param name="e">The e parameter.</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.CalculateEigenVectors(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Calculates eigen vectors.
            </summary>
            <param name="m11">The m11 parameter.</param>
            <param name="m12">The m12 parameter.</param>
            <param name="m13">The m13 parameter.</param>
            <param name="m22">The m22 parameter.</param>
            <param name="m23">The m23 parameter.</param>
            <param name="m33">The m33 parameter.</param>
            <param name="e1">The e1 parameter.</param>
            <param name="e2">The e2 parameter.</param>
            <param name="e3">The e3 parameter.</param>
            <param name="pV1">The first vector.</param>
            <param name="pV2">The second vector.</param>
            <param name="pV3">The third vector.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.CalculateEigenVectorsFromCovarianceMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Calculates eigen vectors from a covariance matrix.
            </summary>
            <param name="cxx">The <paramref name="cxx"/> parameter.</param>
            <param name="cyy">The <paramref name="cyy"/> parameter.</param>
            <param name="czz">The <paramref name="czz"/> parameter.</param>
            <param name="cxy">The <paramref name="cxy"/> parameter.</param>
            <param name="cxz">The <paramref name="cxz"/> parameter.</param>
            <param name="cyz">The <paramref name="cyz"/> parameter.</param>
            <param name="pV1">The first vector.</param>
            <param name="pV2">The second vector.</param>
            <param name="pV3">The third vector.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.FastIntersectTrianglePlane(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            A fast triangle - plane intersect test.
            </summary>
            <param name="v0">The first point of the triangle.</param>
            <param name="v1">The second point of the triangle.</param>
            <param name="v2">The third point of the triangle.</param>
            <param name="plane">The plane.</param>
            <param name="outside">The outside.</param>
            <param name="inside">The inside.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.FastIntersectSpherePlane(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            A fast sphere - plane intersect test.
            </summary>
            <param name="center">The center of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="plane">The plane.</param>
            <param name="outside">The outside.</param>
            <param name="inside">The inside.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.FastIntersectAxisAlignedBoxPlane(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            A fast axis aligned box - plane intersect test.
            </summary>
            <param name="center">The center of the box.</param>
            <param name="extents">The extents of the box.</param>
            <param name="plane">The plane.</param>
            <param name="outside">The outside.</param>
            <param name="inside">The inside.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.FastIntersectOrientedBoxPlane(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            A fast oriented box - plane intersect test.
            </summary>
            <param name="center">The center of the box.</param>
            <param name="extents">The extents of the box.</param>
            <param name="axis0">The first axis.</param>
            <param name="axis1">The second axis.</param>
            <param name="axis2">The third axis.</param>
            <param name="plane">The plane.</param>
            <param name="outside">The outside.</param>
            <param name="inside">The inside.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.Internal.FastIntersectFrustumPlane(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            A fast frustum - plane test.
            </summary>
            <param name="point0">The first point.</param>
            <param name="point1">The second point.</param>
            <param name="point2">The third point.</param>
            <param name="point3">The fourth point.</param>
            <param name="point4">The fifth point.</param>
            <param name="point5">The sixth point.</param>
            <param name="point6">The seventh point.</param>
            <param name="point7">The eighth point.</param>
            <param name="plane">The plane.</param>
            <param name="outside">The outside.</param>
            <param name="inside">The inside.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType">
            <summary>
            Indicates whether an object intersects a plane.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType.Intersecting">
            <summary>
            The object intersects the plane.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest">
            <summary>
            Triangle test functions.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether a triangle intersects with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="v0">The first vector defining the triangle.</param>
            <param name="v1">The second vector defining the triangle.</param>
            <param name="v2">The third vector defining the triangle.</param>
            <returns>A boolean value indicating whether the triangle intersects with the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@)">
            <summary>
            Test whether a triangle intersects with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="v0">The first vector defining the triangle.</param>
            <param name="v1">The second vector defining the triangle.</param>
            <param name="v2">The third vector defining the triangle.</param>
            <param name="distance">The distance along the ray where the intersection occurs.</param>
            <returns>A boolean value indicating whether the triangle intersects with the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single@,System.Single@,System.Single@)">
            <summary>
            Test whether a triangle intersects with a ray.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
            <param name="v0">The first vector defining the triangle.</param>
            <param name="v1">The second vector defining the triangle.</param>
            <param name="v2">The third vector defining the triangle.</param>
            <param name="uCoordinate">The first barycentric hit coordinate.</param>
            <param name="vCoordinate">The second barycentric hit coordinate.</param>
            <param name="distance">The distance along the ray where the intersection occurs.</param>
            <returns>A boolean value indicating whether the triangle intersects with the ray.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether two triangles intersect.
            </summary>
            <param name="a0">The first vector defining triangle A.</param>
            <param name="a1">The second vector defining triangle A.</param>
            <param name="a2">The third vector defining triangle A.</param>
            <param name="b0">The first vector defining triangle B.</param>
            <param name="b1">The second vector defining triangle B.</param>
            <param name="b2">The third vector defining triangle B.</param>
            <returns>A boolean value indicating whether the triangles intersect.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.Intersects(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether a triangle and a plane intersect.
            </summary>
            <param name="v0">The first vector defining a triangle.</param>
            <param name="v1">The second vector defining a triangle.</param>
            <param name="v2">The third vector defining a triangle.</param>
            <param name="plane">A vector defining a plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType"/> value indicating whether the triangle intersects the plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.ContainedBy(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether a triangle is contained within six planes (typically a frustum).
            </summary>
            <param name="v0">The first vector defining the triangle.</param>
            <param name="v1">The second vector defining the triangle.</param>
            <param name="v2">The third vector defining the triangle.</param>
            <param name="plane0">A vector defining the first plane.</param>
            <param name="plane1">A vector defining the second plane.</param>
            <param name="plane2">A vector defining the third plane.</param>
            <param name="plane3">A vector defining the fourth plane.</param>
            <param name="plane4">A vector defining the fifth plane.</param>
            <param name="plane5">A vector defining the sixth plane.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.Collision.ContainmentType"/> value indicating whether the triangle is contained within the planes.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half">
            <summary>
            An alias to <c>ushort</c> packed with a 16-bit floating-point number consisting of a sign bit, a 5-bit biased exponent, and a 10-bit mantissa.
            </summary>
            <remarks>
            The <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> data type is equivalent to the IEEE 754 binary16 format.
            </remarks>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.Half.half">
            <summary>
            The packed data.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.Half)~System.Single">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.</param>
            <returns>The <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.Half)~System.Double">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value to a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.</param>
            <returns>The <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Explicit(System.Single)~JeremyAnsel.DirectX.DXMath.PackedVector.Half">
            <summary>
            Converts a <see cref="T:System.Single"/> value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value.</param>
            <returns>The <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Explicit(System.Double)~JeremyAnsel.DirectX.DXMath.PackedVector.Half">
            <summary>
            Converts a <see cref="T:System.Double"/> value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value.</param>
            <returns>The <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.Half"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.Half)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2">
            <summary>
            A 2D vector where each component is a signed integer, 8-bits (1 byte) in length.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.#ctor(System.SByte,System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.#ctor(System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2,JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2,JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4">
            <summary>
            A 4D vector where each component is a signed integer, 8-bits (1 byte) in length.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.#ctor(System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4,JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4,JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2">
            <summary>
            A 2D vector for storing signed, normalized values as signed 8-bits (1 byte) integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.#ctor(System.SByte,System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.#ctor(System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4">
            <summary>
            A 3D vector for storing signed, normalized values as signed 8-bits (1 byte) integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.#ctor(System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba">
            <summary>
            A 32-bit Alpha Red Green Blue (ARGB) color vector, where each color channel is specified as an unsigned 8 bit integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.b">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.g">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.r">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.a">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> struct.
            </summary>
            <param name="color">A packed value representing the color.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> struct.
            </summary>
            <param name="values">The components of the color.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Blue">
            <summary>
            Gets or sets the blue component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Green">
            <summary>
            Gets or sets the green component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Red">
            <summary>
            Gets or sets the red component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Alpha">
            <summary>
            Gets or sets the alpha component.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to a packed value.
            </summary>
            <param name="color">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.
            </summary>
            <param name="color">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba,JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba,JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.FromArgb(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.ToArgb">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4">
            <summary>
            A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit signed integer value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4">
            <summary>
            A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and a 2 bit signed w-component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed">
            <summary>
            A 3D vector with X and Y components stored as 11 bit floating point number, and Z component stored as a 10 bit floating-point value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.XM">
            <summary>
            Gets or sets the 6-bit mantissa for the x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.XE">
            <summary>
            Gets or sets the 5-bit biased exponent for the x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.YM">
            <summary>
            Gets or sets the 6-bit mantissa for the y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.YE">
            <summary>
            Gets or sets the 5-bit biased exponent for the y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.ZM">
            <summary>
            Gets or sets the 5-bit mantissa for the z component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.ZE">
            <summary>
            Gets or sets the 5-bit biased exponent for the z component.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed,JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed,JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent">
            <summary>
            A 3D vector of three floating-point components with 9 bit mantissas, each sharing the same 5-bit exponent.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.XM">
            <summary>
            Gets or sets the 9-bit x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.YM">
            <summary>
            Gets or sets the 9-bit y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.ZM">
            <summary>
            Gets or sets the 9-bit z component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.E">
            <summary>
            Gets or sets the 5-bit shared exponent.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent,JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent,JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2">
            <summary>
            A 2D vector consisting of two half-precision (16bit) floating-point values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.x">
            <summary>
            The x-coordinate.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.y">
            <summary>
            The y-coordinate.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.#ctor(JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.#ctor(JeremyAnsel.DirectX.DXMath.PackedVector.Half[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2,JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2,JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4">
            <summary>
            A 4D vector consisting of four half-precision (16-bit) floating-point values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.x">
            <summary>
            The x-coordinate.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.y">
            <summary>
            The y-coordinate.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.z">
            <summary>
            The z-coordinate.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.w">
            <summary>
            The w-coordinate.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.#ctor(JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half,JeremyAnsel.DirectX.DXMath.PackedVector.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <param name="w">The w-coordinate.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.#ctor(JeremyAnsel.DirectX.DXMath.PackedVector.Half[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <param name="w">The w-coordinate.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.Z">
            <summary>
            Gets or sets the z-coordinate.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.W">
            <summary>
            Gets or sets the w-coordinate.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4,JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4,JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2">
            <summary>
            A 2D vector consisting of 16-bit signed and normalized integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.#ctor(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2,JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2,JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4">
            <summary>
            A 4D vector consisting of 16-bit signed integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.#ctor(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4,JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4,JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2">
            <summary>
            A 2D vector for storing signed, normalized values as signed 16-bit integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.#ctor(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4">
            <summary>
            A 4D vector for storing signed, normalized values as signed 16-bit integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.#ctor(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555">
            <summary>
            A 4D vector with x-,y-, and z- components represented as 5 bit unsigned integer values, and the w-component as a 1 bit integer value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> struct.
            </summary>
            <param name="array">The x y z components of the vector.</param>
            <param name="w">The w component of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.#ctor(System.Single[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> struct.
            </summary>
            <param name="array">The x y z components of the vector.</param>
            <param name="w">The w component of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.W">
            <summary>
            Gets or sets a value indicating whether the w-coordinate of the vector is set.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)~System.UInt16">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Implicit(System.UInt16)~JeremyAnsel.DirectX.DXMath.PackedVector.XMU555">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMU555">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555,JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555,JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.FromPacked(System.UInt16)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565">
            <summary>
            A 3D vector with x- and z- components represented as 5-bit unsigned integer values, and the y- component as a 6-bit unsigned integer value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.X">
            <summary>
            Gets or sets the x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.Y">
            <summary>
            Gets or sets the y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.Z">
            <summary>
            Gets or sets the z component.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)~System.UInt16">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Implicit(System.UInt16)~JeremyAnsel.DirectX.DXMath.PackedVector.XMU565">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMU565">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565,JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565,JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.FromPacked(System.UInt16)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2">
            <summary>
            A 2D vector where each component is a unsigned integer, 8-bits (1 byte) in length.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4">
            <summary>
            A 4D vector where each component is a unsigned integer, 8-bits (1 byte) in length.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2">
            <summary>
            A 2D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4">
            <summary>
            A 3D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4">
            <summary>
            A 4D vector with x-,y-, and z- components represented as 10 bit unsigned integer values, and the w-component as a 2 bit unsigned integer value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4">
            <summary>
            A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR">
            <summary>
            A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR,JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4">
            <summary>
            A 4D vector with four unsigned 4-bit integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)~System.UInt16">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Implicit(System.UInt16)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.FromPacked(System.UInt16)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2">
            <summary>
            A 2D vector consisting of 16-bit unsigned integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4">
            <summary>
            A 4D vector consisting of 16-bit unsigned integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2">
            <summary>
            A 2D vector for storing unsigned, normalized values as unsigned 16-bit integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.Y">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4">
            <summary>
            A 4D vector for storing unsigned, normalized values as signed 16-bit integers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4">
            <summary>
            A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit unsigned integer value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4,JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4">
            <summary>
            A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and an unsigned, normalized value as 2 bit unsigned w-component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.v">
            <summary>
            A packed value representing the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> struct.
            </summary>
            <param name="packed">A packed value representing the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)~System.UInt32">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to a packed value.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</param>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Implicit(System.UInt32)~JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Equality(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.op_Inequality(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4,JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.FromPacked(System.UInt32)">
            <summary>
            Converts a packed value to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.
            </summary>
            <param name="value">A packed value.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.Equals(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.ToPacked">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to a packed value.
            </summary>
            <returns>A packed value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMColor">
            <summary>
            The color functions provided by DirectXMath.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests for the equality of two colors.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if each of the components of the two colors are equal, or false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests to see whether two colors are unequal.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if any component of C1 is different from the corresponding component of C2. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.Greater(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether all the components of the first color are greater than the corresponding components in the second color.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if every component of C1 is greater than the corresponding component in C2. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.GreaterOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether all the components of the first color are greater than or equal to the corresponding components of the second color.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if every component of C1 is greater than or equal to the corresponding component in C2. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.Less(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether all the components of the first color are less than the corresponding components of the second color.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if every component of C1 is less than the corresponding component in C2. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.LessOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether all the components of the first color are less than or equal to the corresponding components of the second color.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns>Returns true if every component of C1 is less than or equal to the corresponding component in C2. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests to see whether any component of a color is not a number (NaN).
            </summary>
            <param name="c">The color.</param>
            <returns>Returns true if any components of C are NaN, or false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests to see whether any of the components of a color are either positive or negative infinity.
            </summary>
            <param name="c">The color.</param>
            <returns>Returns true if any components of C are either positive or negative infinity. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.Negative(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Determines the negative RGB color value of a color.
            </summary>
            <param name="c">The color. Each of the components of C should be in the range 0.0f to 1.0f.</param>
            <returns>The negative color. The w-component (alpha) is copied unmodified from the input vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.Modulate(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Blends two colors by multiplying corresponding components together.
            </summary>
            <param name="c1">The first color.</param>
            <param name="c2">The second color.</param>
            <returns>The color resulting from the modulation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.AdjustSaturation(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Adjusts the saturation value of a color.
            </summary>
            <param name="color">The color. Each of the components of C should be in the range 0.0f to 1.0f.</param>
            <param name="saturation">Saturation value. This parameter linearly interpolates between the color converted to gray-scale and the original color, C. If Saturation is 0.0f, the function returns the gray-scale color. If Saturation is 1.0f, the function returns the original color.</param>
            <returns>The color resulting from the saturation adjustment.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.AdjustContrast(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Adjusts the contrast value of a color.
            </summary>
            <param name="color">The color. Each of the components of C should be in the range 0.0f to 1.0f.</param>
            <param name="contrast">Contrast value. This parameter linearly interpolates between 50 percent gray and the color C. If this parameter is 0.0f, the returned color is 50 percent gray. If this parameter is 1.0f, the returned color is the original color.</param>
            <returns>The color resulting from the contrast adjustment.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToHsl(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts RGB color values to HSL color values.
            </summary>
            <param name="rgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. The X element is Hue (H), the Y element is Saturation (S), the Z element is Luminance (L), and the W element is Alpha (a copy of the input's Alpha value). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.HslToRgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts HSL color values to RGB color values.
            </summary>
            <param name="hsl">Color value to convert. The X element is Hue (H), the Y element is Saturation (S), the Z element is Luminance (L), and the W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>hsl.w</c>) . Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToHsv(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts RGB color values to HSV color values.
            </summary>
            <param name="rgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (a copy of <c>rgb.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.HsvToRgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts HSV color values to RGB color values.
            </summary>
            <param name="hsv">Color value to convert. The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>hsv.w</c>) . Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToYuv(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts RGB color values to YUV color values.
            </summary>
            <param name="rgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (-0.5 to 0.5), the Z element contains the Red-difference chroma (-0.5 to 0.5), and the W element contains the Alpha (a copy of <c>rgb.w</c>).</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.YuvToRgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts YUV color values to RGB color values.
            </summary>
            <param name="yuv">Color value to convert in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (0.0 to 1.0).</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>yuv.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToYuvHD(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts RGB color values to YUV HD color values.
            </summary>
            <param name="rgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (-0.5 to 0.5), the Z element contains the Red-difference chroma (-0.5 to 0.5), and the W element contains the Alpha (a copy of <c>rgb.w</c>).</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.YuvToRgbHD(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts YUV color values to RGB HD color values.
            </summary>
            <param name="yuv">Color value to convert in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (0.0 to 1.0).</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>yuv.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToXyz(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts RGB color values to XYZ color values.
            </summary>
            <param name="rgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of <c>rgb.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.XyzToRgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts XYZ color values to RGB color values.
            </summary>
            <param name="xyz">Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>xyz.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.XyzToSrgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts XYZ color values to SRGB color values.
            </summary>
            <param name="xyz">Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha. Each has a range of 0.0 to 1.0.</param>
            <returns>The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of <c>xyz.w</c>). Each has a range of 0.0 to 1.0 in the linear sRGB colorspace.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.SrgbToXyz(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts SRGB color values to XYZ color values.
            </summary>
            <param name="srgb">Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0 and is in the linear sRGB colorspace.</param>
            <returns>The converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of <c>rgb.w</c>). Each has a range of 0.0 to 1.0.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.RgbToSrgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts an RGB color vector to sRGB.
            </summary>
            <param name="rgb">The original RGB color vector.</param>
            <returns>The converted sRGBA color vector. The x element is red, the y element is green, the z element is blue, and the w element is the alpha value (which is a copy of <c>rgb.w</c>). Each element value has a range of 0.0 to 1.0 in the sRGB colorspace.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.SrgbToRgb(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts an sRGB color vector to RGB.
            </summary>
            <param name="srgb">An sRGB color vector.</param>
            <returns>The converted RGBA color vector. The x element is red, the y element is green, the z element is blue, and the w element is the alpha value (which is a copy of <c>srgb.w</c>). Each element value has a range of 0.0 to 1.0 in the RGB colorspace.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMColor.HueToClr(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts hue to clr.
            </summary>
            <param name="p">The p parameter.</param>
            <param name="q">The q parameter.</param>
            <param name="h">The h parameter.</param>
            <returns>The clr.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord">
            <summary>
            A comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.Mask">
            <summary>
            Mask to get a comparison result.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.MaskTrue">
            <summary>
            Mask to get a comparison result, and verify if it is a logical true.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.MaskFalse">
            <summary>
            Mask to get a comparison result, and verify if it is a logical false.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.MaskBounds">
            <summary>
            Mask to get a comparison result, and verify if the result indicates that some of the inputs were out of bounds.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.record">
            <summary>
            The comparison record.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> struct.
            </summary>
            <param name="record">A comparison record.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAllTrue">
            <summary>
            Gets a value indicating whether all of the compared components are true.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAnyTrue">
            <summary>
            Gets a value indicating whether any of the compared components are true
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAllFalse">
            <summary>
            Gets a value indicating whether all of the compared components are false.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAnyFalse">
            <summary>
            Gets a value indicating whether any of the compared components are false.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsMixed">
            <summary>
            Gets a value indicating whether the compared components had mixed results: some true and some false.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAllInBounds">
            <summary>
            Gets a value indicating whether all of the compared components are within set bounds.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.IsAnyOutOfBounds">
            <summary>
            Gets a value indicating whether any of the compared components are outside the set bounds.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.op_Equality(JeremyAnsel.DirectX.DXMath.XMComparisonRecord,JeremyAnsel.DirectX.DXMath.XMComparisonRecord)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.op_Inequality(JeremyAnsel.DirectX.DXMath.XMComparisonRecord,JeremyAnsel.DirectX.DXMath.XMComparisonRecord)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMComparisonRecord"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.Equals(JeremyAnsel.DirectX.DXMath.XMComparisonRecord)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMComparisonRecord.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat2">
            <summary>
            A 2D vector consisting of two single-precision floating-point values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMFloat2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat2,JeremyAnsel.DirectX.DXMath.XMFloat2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat2,JeremyAnsel.DirectX.DXMath.XMFloat2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.Equals(JeremyAnsel.DirectX.DXMath.XMFloat2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat3">
            <summary>
            A 3D vector consisting of three single-precision floating-point values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat3)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMFloat3">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat3,JeremyAnsel.DirectX.DXMath.XMFloat3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.Equals(JeremyAnsel.DirectX.DXMath.XMFloat3)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3">
            <summary>
            A 3*3 floating point matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m11">
            <summary>
            The value in the first row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m12">
            <summary>
            The value in the first row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m13">
            <summary>
            The value in the first row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m21">
            <summary>
            The value in the second row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m22">
            <summary>
            The value in the second row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m23">
            <summary>
            The value in the second row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m31">
            <summary>
            The value in the third row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m32">
            <summary>
            The value in the third row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat3X3.m33">
            <summary>
            The value in the third row and third column.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> struct.
            </summary>
            <param name="m11">The value in the first row and first column.</param>
            <param name="m12">The value in the first row and second column.</param>
            <param name="m13">The value in the first row and third column.</param>
            <param name="m21">The value in the second row and first column.</param>
            <param name="m22">The value in the second row and second column.</param>
            <param name="m23">The value in the second row and third column.</param>
            <param name="m31">The value in the third row and first column.</param>
            <param name="m32">The value in the third row and second column.</param>
            <param name="m33">The value in the third row and third column.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> struct.
            </summary>
            <param name="array">The values of the matrix.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M11">
            <summary>
            Gets or sets the value in the first row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M12">
            <summary>
            Gets or sets the value in the first row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M13">
            <summary>
            Gets or sets the value in the first row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M21">
            <summary>
            Gets or sets the value in the second row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M22">
            <summary>
            Gets or sets the value in the second row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M23">
            <summary>
            Gets or sets the value in the second row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M31">
            <summary>
            Gets or sets the value in the third row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M32">
            <summary>
            Gets or sets the value in the third row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.M33">
            <summary>
            Gets or sets the value in the third row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat3X3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element specified by row and column.
            </summary>
            <param name="row">The row containing the matrix element.</param>
            <param name="column">The column containing the matrix element.</param>
            <returns>A float value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat3X3)~JeremyAnsel.DirectX.DXMath.XMMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMMatrix)~JeremyAnsel.DirectX.DXMath.XMFloat3X3">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat3X3,JeremyAnsel.DirectX.DXMath.XMFloat3X3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat3X3,JeremyAnsel.DirectX.DXMath.XMFloat3X3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.FromMatrix(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.Equals(JeremyAnsel.DirectX.DXMath.XMFloat3X3)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat3X3.ToMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat4">
            <summary>
            A 4D vector consisting of four single-precision floating-point values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMFloat4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat4,JeremyAnsel.DirectX.DXMath.XMFloat4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat4,JeremyAnsel.DirectX.DXMath.XMFloat4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.Equals(JeremyAnsel.DirectX.DXMath.XMFloat4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3">
            <summary>
            A 4*3 floating point matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m11">
            <summary>
            The value in the first row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m12">
            <summary>
            The value in the first row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m13">
            <summary>
            The value in the first row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m21">
            <summary>
            The value in the second row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m22">
            <summary>
            The value in the second row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m23">
            <summary>
            The value in the second row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m31">
            <summary>
            The value in the third row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m32">
            <summary>
            The value in the third row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m33">
            <summary>
            The value in the third row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m41">
            <summary>
            The value in the fourth row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m42">
            <summary>
            The value in the fourth row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X3.m43">
            <summary>
            The value in the fourth row and third column.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> struct.
            </summary>
            <param name="m11">The value in the first row and first column.</param>
            <param name="m12">The value in the first row and second column.</param>
            <param name="m13">The value in the first row and third column.</param>
            <param name="m21">The value in the second row and first column.</param>
            <param name="m22">The value in the second row and second column.</param>
            <param name="m23">The value in the second row and third column.</param>
            <param name="m31">The value in the third row and first column.</param>
            <param name="m32">The value in the third row and second column.</param>
            <param name="m33">The value in the third row and third column.</param>
            <param name="m41">The value in the fourth row and first column.</param>
            <param name="m42">The value in the fourth row and second column.</param>
            <param name="m43">The value in the fourth row and third column.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> struct.
            </summary>
            <param name="array">the values of the matrix.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M11">
            <summary>
            Gets or sets the value in the first row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M12">
            <summary>
            Gets or sets the value in the first row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M13">
            <summary>
            Gets or sets the value in the first row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M21">
            <summary>
            Gets or sets the value in the second row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M22">
            <summary>
            Gets or sets the value in the second row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M23">
            <summary>
            Gets or sets the value in the second row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M31">
            <summary>
            Gets or sets the value in the third row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M32">
            <summary>
            Gets or sets the value in the third row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M33">
            <summary>
            Gets or sets the value in the third row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M41">
            <summary>
            Gets or sets the value in the fourth row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M42">
            <summary>
            Gets or sets the value in the fourth row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.M43">
            <summary>
            Gets or sets the value in the fourth row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element specified by row and column.
            </summary>
            <param name="row">The row containing the matrix element.</param>
            <param name="column">The column containing the matrix element.</param>
            <returns>A float value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat4X3)~JeremyAnsel.DirectX.DXMath.XMMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMMatrix)~JeremyAnsel.DirectX.DXMath.XMFloat4X3">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat4X3,JeremyAnsel.DirectX.DXMath.XMFloat4X3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat4X3,JeremyAnsel.DirectX.DXMath.XMFloat4X3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.FromMatrix(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.Equals(JeremyAnsel.DirectX.DXMath.XMFloat4X3)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X3.ToMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4">
            <summary>
            A 4*4 floating point matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m11">
            <summary>
            The value in the first row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m12">
            <summary>
            The value in the first row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m13">
            <summary>
            The value in the first row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m14">
            <summary>
            The value in the first row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m21">
            <summary>
            The value in the second row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m22">
            <summary>
            The value in the second row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m23">
            <summary>
            The value in the second row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m24">
            <summary>
            The value in the second row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m31">
            <summary>
            The value in the third row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m32">
            <summary>
            The value in the third row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m33">
            <summary>
            The value in the third row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m34">
            <summary>
            The value in the third row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m41">
            <summary>
            The value in the fourth row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m42">
            <summary>
            The value in the fourth row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m43">
            <summary>
            The value in the fourth row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMFloat4X4.m44">
            <summary>
            The value in the fourth row and fourth column.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> struct.
            </summary>
            <param name="m11">The value in the first row and first column.</param>
            <param name="m12">The value in the first row and second column.</param>
            <param name="m13">The value in the first row and third column.</param>
            <param name="m14">The value in the first row and fourth column.</param>
            <param name="m21">The value in the second row and first column.</param>
            <param name="m22">The value in the second row and second column.</param>
            <param name="m23">The value in the second row and third column.</param>
            <param name="m24">The value in the second row and fourth column.</param>
            <param name="m31">The value in the third row and first column.</param>
            <param name="m32">The value in the third row and second column.</param>
            <param name="m33">The value in the third row and third column.</param>
            <param name="m34">The value in the third row and fourth column.</param>
            <param name="m41">The value in the fourth row and first column.</param>
            <param name="m42">The value in the fourth row and second column.</param>
            <param name="m43">The value in the fourth row and third column.</param>
            <param name="m44">The value in the fourth row and fourth column.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> struct.
            </summary>
            <param name="array">The values of the matrix.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M11">
            <summary>
            Gets or sets the value in the first row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M12">
            <summary>
            Gets or sets the value in the first row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M13">
            <summary>
            Gets or sets the value in the first row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M14">
            <summary>
            Gets or sets the value in the first row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M21">
            <summary>
            Gets or sets the value in the second row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M22">
            <summary>
            Gets or sets the value in the second row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M23">
            <summary>
            Gets or sets the value in the second row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M24">
            <summary>
            Gets or sets the value in the second row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M31">
            <summary>
            Gets or sets the value in the third row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M32">
            <summary>
            Gets or sets the value in the third row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M33">
            <summary>
            Gets or sets the value in the third row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M34">
            <summary>
            Gets or sets the value in the third row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M41">
            <summary>
            Gets or sets the value in the fourth row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M42">
            <summary>
            Gets or sets the value in the fourth row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M43">
            <summary>
            Gets or sets the value in the fourth row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.M44">
            <summary>
            Gets or sets the value in the fourth row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMFloat4X4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element specified by row and column.
            </summary>
            <param name="row">The row containing the matrix element.</param>
            <param name="column">The column containing the matrix element.</param>
            <returns>A float value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMFloat4X4)~JeremyAnsel.DirectX.DXMath.XMMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMMatrix)~JeremyAnsel.DirectX.DXMath.XMFloat4X4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.op_Equality(JeremyAnsel.DirectX.DXMath.XMFloat4X4,JeremyAnsel.DirectX.DXMath.XMFloat4X4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.op_Inequality(JeremyAnsel.DirectX.DXMath.XMFloat4X4,JeremyAnsel.DirectX.DXMath.XMFloat4X4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.FromMatrix(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.Equals(JeremyAnsel.DirectX.DXMath.XMFloat4X4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMFloat4X4.ToMatrix">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMGlobalConstants">
            <summary>
            Internal constants.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.IdentityR0">
            <summary>
            The identity r0 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.IdentityR1">
            <summary>
            The identity r1 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.IdentityR2">
            <summary>
            The identity r2 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.IdentityR3">
            <summary>
            The identity r3 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.TanEstCoefficients">
            <summary>
            The tan est coefficients.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.NegativeZero">
            <summary>
            The negative zero vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.One">
            <summary>
            The one vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Two">
            <summary>
            The two vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Four">
            <summary>
            The four vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Six">
            <summary>
            The six vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.NegativeOne">
            <summary>
            The negative one vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.OneHalf">
            <summary>
            The one half vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.NegativeTwoPI">
            <summary>
            The negative two pi vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.NegativePI">
            <summary>
            The negative pi vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.PI">
            <summary>
            The pi vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.TwoPI">
            <summary>
            The two pi vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.ReciprocalTwoPI">
            <summary>
            The reciprocal twi pi vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Epsilon">
            <summary>
            the epsilon vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Infinity">
            <summary>
            The infinity vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.QNaN">
            <summary>
            The QNaN vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Select1000">
            <summary>
            The select 1000 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Select1100">
            <summary>
            The select 1100 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Select1110">
            <summary>
            The select 1110 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.Select1011">
            <summary>
            The select 1011 vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.MsrgbScale">
            <summary>
            The msrgb scale.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.MsrgbA">
            <summary>
            The msrgb A.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.MsrgbA1">
            <summary>
            The msrgb A1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.UByteMax">
            <summary>
            Thee UByte max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.ByteMin">
            <summary>
            The Byte min.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.ByteMax">
            <summary>
            The Byte max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.ShortMin">
            <summary>
            the Shirt min.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.ShortMax">
            <summary>
            The Short max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMGlobalConstants.UShortMax">
            <summary>
            The UShort max.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMInt2">
            <summary>
            A 2D vector where each component is a signed integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMInt2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMInt2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.op_Equality(JeremyAnsel.DirectX.DXMath.XMInt2,JeremyAnsel.DirectX.DXMath.XMInt2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.op_Inequality(JeremyAnsel.DirectX.DXMath.XMInt2,JeremyAnsel.DirectX.DXMath.XMInt2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.Equals(JeremyAnsel.DirectX.DXMath.XMInt2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMInt3">
            <summary>
            A 3D vector where each component is a signed integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt3.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt3.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt3.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> struct.
            </summary>
            <param name="array">The components of the array.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt3.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt3.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt3.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMInt3)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMInt3">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.op_Equality(JeremyAnsel.DirectX.DXMath.XMInt3,JeremyAnsel.DirectX.DXMath.XMInt3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.op_Inequality(JeremyAnsel.DirectX.DXMath.XMInt3,JeremyAnsel.DirectX.DXMath.XMInt3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.Equals(JeremyAnsel.DirectX.DXMath.XMInt3)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt3.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMInt4">
            <summary>
            A 4D vector where each component is a signed integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMInt4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMInt4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMInt4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMInt4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.op_Equality(JeremyAnsel.DirectX.DXMath.XMInt4,JeremyAnsel.DirectX.DXMath.XMInt4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.op_Inequality(JeremyAnsel.DirectX.DXMath.XMInt4,JeremyAnsel.DirectX.DXMath.XMInt4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.Equals(JeremyAnsel.DirectX.DXMath.XMInt4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMInt4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMKnownColor">
            <summary>
            Constants for the standard color definitions.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.AliceBlue">
            <summary>
            The alice blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.AntiqueWhite">
            <summary>
            The antique white color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Aqua">
            <summary>
            The aqua color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Aquamarine">
            <summary>
            The aquamarine color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Azure">
            <summary>
            The azure color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Beige">
            <summary>
            The beige color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Bisque">
            <summary>
            The bisque color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.BlanchedAlmond">
            <summary>
            The blanched almond color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.BlueViolet">
            <summary>
            The blue violet color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Brown">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.BurlyWood">
            <summary>
            The burly wood color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.CadetBlue">
            <summary>
            The cadet blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Chartreuse">
            <summary>
            The chartreuse color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Chocolate">
            <summary>
            The chocolate color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Coral">
            <summary>
            The coral color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.CornflowerBlue">
            <summary>
            The cornflower blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Cornsilk">
            <summary>
            The cornsilk color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Crimson">
            <summary>
            The crimson color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Cyan">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkBlue">
            <summary>
            The dark blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkCyan">
            <summary>
            The dark cyan color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkGoldenrod">
            <summary>
            The dark goldenrod color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkGray">
            <summary>
            The dark gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkGreen">
            <summary>
            The dark green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkKhaki">
            <summary>
            The dark khaki color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkMagenta">
            <summary>
            The dark magenta color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkOliveGreen">
            <summary>
            The dark olive green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkOrange">
            <summary>
            The dark orange color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkOrchid">
            <summary>
            The dark orchid color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkRed">
            <summary>
            The dark red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkSalmon">
            <summary>
            The dark salmon color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkSeaGreen">
            <summary>
            The dark sea green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkSlateBlue">
            <summary>
            The dark slate blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkSlateGray">
            <summary>
            The dark slate gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkTurquoise">
            <summary>
            The dark turquoise color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DarkViolet">
            <summary>
            The dark violet color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DeepPink">
            <summary>
            The deep pink color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DeepSkyBlue">
            <summary>
            The deep sky blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DimGray">
            <summary>
            The dim gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.DodgerBlue">
            <summary>
            The dodger blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Firebrick">
            <summary>
            The firebrick color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.FloralWhite">
            <summary>
            The floral white color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.ForestGreen">
            <summary>
            The forest green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Fuchsia">
            <summary>
            The fuchsia color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Gainsboro">
            <summary>
            The gainsboro color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.GhostWhite">
            <summary>
            The ghost white color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Gold">
            <summary>
            The gold color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Goldenrod">
            <summary>
            The goldenrod color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Gray">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Green">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.GreenYellow">
            <summary>
            The green yellow color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Honeydew">
            <summary>
            The honeydew color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.HotPink">
            <summary>
            The hot pink color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.IndianRed">
            <summary>
            The indian red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Indigo">
            <summary>
            The indigo color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Ivory">
            <summary>
            The ivory color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Khaki">
            <summary>
            The khaki color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Lavender">
            <summary>
            The lavender color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LavenderBlush">
            <summary>
            The lavender blush color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LawnGreen">
            <summary>
            The lawn green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LemonChiffon">
            <summary>
            The lemon chiffon color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightBlue">
            <summary>
            The light blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightCoral">
            <summary>
            The light coral color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightCyan">
            <summary>
            The light cyan color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightGoldenrodYellow">
            <summary>
            The light goldenrod yellow color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightGreen">
            <summary>
            The light green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightGray">
            <summary>
            The light gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightPink">
            <summary>
            The light pink color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightSalmon">
            <summary>
            The light salmon color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightSeaGreen">
            <summary>
            The light sea green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightSkyBlue">
            <summary>
            The light sky blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightSlateGray">
            <summary>
            The light slate gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightSteelBlue">
            <summary>
            The light steel blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LightYellow">
            <summary>
            The light yellow color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Lime">
            <summary>
            The lime color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.LimeGreen">
            <summary>
            The lime green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Linen">
            <summary>
            The linen color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Magenta">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Maroon">
            <summary>
            The maroon color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumAquamarine">
            <summary>
            The medium aquamarine color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumBlue">
            <summary>
            The medium blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumOrchid">
            <summary>
            The medium orchid color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumPurple">
            <summary>
            The medium purple color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumSeaGreen">
            <summary>
            The medium sea green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumSlateBlue">
            <summary>
            The medium slate blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumSpringGreen">
            <summary>
            The medium spring green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumTurquoise">
            <summary>
            The medium turquoise color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MediumVioletRed">
            <summary>
            The medium violet red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MidnightBlue">
            <summary>
            The midnight blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MintCream">
            <summary>
            The mint cream color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.MistyRose">
            <summary>
            The misty rose color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Moccasin">
            <summary>
            The moccasin color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.NavajoWhite">
            <summary>
            The navajo white color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Navy">
            <summary>
            The navy color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.OldLace">
            <summary>
            The old lace color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Olive">
            <summary>
            The olive color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.OliveDrab">
            <summary>
            The olive drab color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Orange">
            <summary>
            The orange color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.OrangeRed">
            <summary>
            The orange red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Orchid">
            <summary>
            The orchid color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PaleGoldenrod">
            <summary>
            The pale goldenrod color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PaleGreen">
            <summary>
            The pale green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PaleTurquoise">
            <summary>
            The pale turquoise color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PaleVioletRed">
            <summary>
            The pale violet red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PapayaWhip">
            <summary>
            The papaya whip color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PeachPuff">
            <summary>
            The peach puff color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Peru">
            <summary>
            The peru color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Pink">
            <summary>
            The pink color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Plum">
            <summary>
            The plum color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.PowderBlue">
            <summary>
            The powder blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Purple">
            <summary>
            The purple color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.RosyBrown">
            <summary>
            The rosy brown color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.RoyalBlue">
            <summary>
            The royal blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SaddleBrown">
            <summary>
            The saddle brown color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Salmon">
            <summary>
            The salmon color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SandyBrown">
            <summary>
            The sandy brown color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SeaGreen">
            <summary>
            The sea green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SeaShell">
            <summary>
            The sea shell color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Sienna">
            <summary>
            The sienna color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Silver">
            <summary>
            The silver color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SkyBlue">
            <summary>
            The sky blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SlateBlue">
            <summary>
            The slate blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SlateGray">
            <summary>
            The slate gray color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Snow">
            <summary>
            The snow color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SpringGreen">
            <summary>
            The spring green color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.SteelBlue">
            <summary>
            The steel blue color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Tan">
            <summary>
            The tan color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Teal">
            <summary>
            The teal color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Thistle">
            <summary>
            The thistle color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Tomato">
            <summary>
            The tomato color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Transparent">
            <summary>
            The transparent color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Turquoise">
            <summary>
            The turquoise color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Violet">
            <summary>
            The violet color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Wheat">
            <summary>
            The wheat color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.WhiteSmoke">
            <summary>
            The white smoke color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.Yellow">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMKnownColor.YellowGreen">
            <summary>
            The yellow green color.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMMath">
            <summary>
            Constants and functions provided by XMMath.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.PI">
            <summary>
            An optimal representation of π.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.TwoPI">
            <summary>
            An optimal representation of 2*π.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.OneDivPI">
            <summary>
            An optimal representation of 1/π.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.OneDivTwoPI">
            <summary>
            An optimal representation of 2/π.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.PIDivTwo">
            <summary>
            An optimal representation of π/2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMath.PIDivFour">
            <summary>
            An optimal representation of π/4.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMath.ConvertToRadians(System.Single)">
            <summary>
            Converts an angle measured in degrees into one measured in radians.
            </summary>
            <param name="degrees">Size of an angle in degrees.</param>
            <returns>Size of the angle in radians.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMath.ConvertToDegrees(System.Single)">
            <summary>
            Converts an angle measured in radians into one measured in degrees.
            </summary>
            <param name="radians">Size of an angle in radians.</param>
            <returns>Size of the angle in degrees.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMath.FresnelTerm(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Calculates the Fresnel term for unpolarized light.
            </summary>
            <param name="cosIncidentAngle">Vector consisting of the cosines of the incident angles.</param>
            <param name="refractionIndex">Vector consisting of the refraction indices of the materials corresponding to the incident angles.</param>
            <returns>Returns a vector containing the Fresnel term of each component.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMMatrix">
            <summary>
            Describes a 4*4 matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.DecomposeEpsilon">
            <summary>
            The decompose epsilon.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m11">
            <summary>
            The value in the first row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m12">
            <summary>
            The value in the first row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m13">
            <summary>
            The value in the first row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m14">
            <summary>
            The value in the first row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m21">
            <summary>
            The value in the second row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m22">
            <summary>
            The value in the second row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m23">
            <summary>
            The value in the second row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m24">
            <summary>
            The value in the second row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m31">
            <summary>
            The value in the third row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m32">
            <summary>
            The value in the third row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m33">
            <summary>
            The value in the third row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m34">
            <summary>
            The value in the third row and fourth column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m41">
            <summary>
            The value in the fourth row and first column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m42">
            <summary>
            The value in the fourth row and second column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m43">
            <summary>
            The value in the fourth row and third column.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMMatrix.m44">
            <summary>
            The value in the fourth row and fourth column.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.#ctor(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> struct.
            </summary>
            <param name="r1">The first row.</param>
            <param name="r2">The second row.</param>
            <param name="r3">The third row.</param>
            <param name="r4">The fourth row.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.#ctor(JeremyAnsel.DirectX.DXMath.XMVector[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> struct.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> struct.
            </summary>
            <param name="m11">The value in the first row and first column.</param>
            <param name="m12">The value in the first row and second column.</param>
            <param name="m13">The value in the first row and third column.</param>
            <param name="m14">The value in the first row and fourth column.</param>
            <param name="m21">The value in the second row and first column.</param>
            <param name="m22">The value in the second row and second column.</param>
            <param name="m23">The value in the second row and third column.</param>
            <param name="m24">The value in the second row and fourth column.</param>
            <param name="m31">The value in the third row and first column.</param>
            <param name="m32">The value in the third row and second column.</param>
            <param name="m33">The value in the third row and third column.</param>
            <param name="m34">The value in the third row and fourth column.</param>
            <param name="m41">The value in the fourth row and first column.</param>
            <param name="m42">The value in the fourth row and second column.</param>
            <param name="m43">The value in the fourth row and third column.</param>
            <param name="m44">The value in the fourth row and fourth column.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> struct.
            </summary>
            <param name="array">The values.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M11">
            <summary>
            Gets or sets the value in the first row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M12">
            <summary>
            Gets or sets the value in the first row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M13">
            <summary>
            Gets or sets the value in the first row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M14">
            <summary>
            Gets or sets the value in the first row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M21">
            <summary>
            Gets or sets the value in the second row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M22">
            <summary>
            Gets or sets the value in the second row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M23">
            <summary>
            Gets or sets the value in the second row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M24">
            <summary>
            Gets or sets the value in the second row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M31">
            <summary>
            Gets or sets the value in the third row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M32">
            <summary>
            Gets or sets the value in the third row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M33">
            <summary>
            Gets or sets the value in the third row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M34">
            <summary>
            Gets or sets the value in the third row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M41">
            <summary>
            Gets or sets the value in the fourth row and first column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M42">
            <summary>
            Gets or sets the value in the fourth row and second column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M43">
            <summary>
            Gets or sets the value in the fourth row and third column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.M44">
            <summary>
            Gets or sets the value in the fourth row and fourth column.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a value specified by row and column.
            </summary>
            <param name="row">The row of the value.</param>
            <param name="column">The column of the value.</param>
            <returns>A float value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_UnaryPlus(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Performance an identity operation on a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Returns the matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_UnaryNegation(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the negation of a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Returns the negation of the matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Addition(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the sum of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns a matrix that is the sum of the two matrices.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Subtraction(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the difference of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns a matrix that is the difference of the two matrices.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Multiply(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the product of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns the product of M1 and M2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Multiply(JeremyAnsel.DirectX.DXMath.XMMatrix,System.Single)">
            <summary>
            Multiply each element of a matrix by a scalar.
            </summary>
            <param name="m">The matrix.</param>
            <param name="s">The scalar.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Multiply(System.Single,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Multiply each element of a matrix by a scalar.
            </summary>
            <param name="s">The scalar.</param>
            <param name="m">The matrix.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Division(JeremyAnsel.DirectX.DXMath.XMMatrix,System.Single)">
            <summary>
            Divide each element of a matrix by a scalar.
            </summary>
            <param name="m">The matrix.</param>
            <param name="s">The scalar.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Equality(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Inequality(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.op_Implicit(JeremyAnsel.DirectX.DXMath.XMMatrix)~System.Single[]">
            <summary>
            Convert a matrix to an array of float.
            </summary>
            <param name="value">The matrix.</param>
            <returns>An array of float.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LoadFloat3X3(JeremyAnsel.DirectX.DXMath.XMFloat3X3)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="source">The structure to load.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LoadFloat4X3(JeremyAnsel.DirectX.DXMath.XMFloat4X3)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="source">The structure to load.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LoadFloat4X4(JeremyAnsel.DirectX.DXMath.XMFloat4X4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/>.
            </summary>
            <param name="source">The structure to load.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Multiply(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the product of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns the product of M1 and M2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.MultiplyTranspose(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the transpose of the product of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns the transpose of the product of M1 and M2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Multiply(JeremyAnsel.DirectX.DXMath.XMMatrix,System.Single)">
            <summary>
            Multiply each element of a matrix by a scalar.
            </summary>
            <param name="m">The matrix.</param>
            <param name="s">The scalar.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Divide(JeremyAnsel.DirectX.DXMath.XMMatrix,System.Single)">
            <summary>
            Divide each element of a matrix by a scalar.
            </summary>
            <param name="m">The matrix.</param>
            <param name="s">The scalar.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Builds a translation matrix from the specified offsets.
            </summary>
            <param name="offsetX">Translation along the x-axis.</param>
            <param name="offsetY">Translation along the y-axis.</param>
            <param name="offsetZ">Translation along the z-axis.</param>
            <returns>Returns the translation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.TranslationFromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a translation matrix from a vector.
            </summary>
            <param name="offset">3D vector describing the translations along the x-axis, y-axis, and z-axis.</param>
            <returns>Returns the translation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="scaleX">Scaling factor along the x-axis.</param>
            <param name="scaleY">Scaling factor along the y-axis.</param>
            <param name="scaleZ">Scaling factor along the z-axis.</param>
            <returns>Returns the scaling matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.ScalingFromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a scaling matrix from a 3D vector.
            </summary>
            <param name="scale">3D vector describing the scaling along the x-axis, y-axis, and z-axis.</param>
            <returns>Returns the scaling matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationX(System.Single)">
            <summary>
            Builds a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation around the x-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationY(System.Single)">
            <summary>
            Builds a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation around the y-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationZ(System.Single)">
            <summary>
            Builds a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation around the z-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationRollPitchYaw(System.Single,System.Single,System.Single)">
            <summary>
            Builds a rotation matrix based on a given pitch, yaw, and roll (Euler angles).
            </summary>
            <param name="pitch">Angle of rotation around the x-axis, in radians.</param>
            <param name="yaw">Angle of rotation around the y-axis, in radians.</param>
            <param name="roll">Angle of rotation around the z-axis, in radians.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationRollPitchYawFromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a rotation matrix based on a vector containing the Euler angles (pitch, yaw, and roll).
            </summary>
            <param name="angles">3D vector containing the Euler angles in the order pitch, then yaw, and then roll.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationNormal(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Builds a matrix that rotates around an arbitrary normal vector.
            </summary>
            <param name="normalAxis">Normal vector describing the axis of rotation.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationAxis(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Builds a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">Vector describing the axis of rotation.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RotationQuaternion(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a rotation matrix from a quaternion.
            </summary>
            <param name="quaternion">Quaternion defining the rotation.</param>
            <returns>Returns the rotation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Transformation2D(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a 2D transformation matrix in the xy plane.
            </summary>
            <param name="scalingOrigin">2D vector describing the center of the scaling.</param>
            <param name="scalingOrientation">Scaling rotation factor.</param>
            <param name="scaling">2D vector containing the scaling factors for the x-axis and y-axis.</param>
            <param name="rotationOrigin">2D vector describing the center of the rotation.</param>
            <param name="rotation">Angle of rotation, in radians.</param>
            <param name="translation">2D vector describing the translation.</param>
            <returns>Returns the transformation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Transformation(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a transformation matrix.
            </summary>
            <param name="scalingOrigin">3D vector describing the center of the scaling.</param>
            <param name="scalingOrientationQuaternion">Quaternion describing the orientation of the scaling.</param>
            <param name="scaling">3D vector containing the scaling factors for the x-axis, y-axis, and z-axis.</param>
            <param name="rotationOrigin">3D vector describing the center of the rotation.</param>
            <param name="rotationQuaternion">Quaternion describing the rotation around the origin indicated by RotationOrigin.</param>
            <param name="translation">3D vector describing the translations along the x-axis, y-axis, and z-axis.</param>
            <returns>Returns the transformation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.AffineTransformation2D(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a 2D affine transformation matrix in the xy plane.
            </summary>
            <param name="scaling">2D vector of scaling factors for the x-coordinate and y-coordinate.</param>
            <param name="rotationOrigin">2D vector describing the center of rotation.</param>
            <param name="rotation">Radian angle of rotation.</param>
            <param name="translation">2D vector translation offsets.</param>
            <returns>Returns the 2D affine transformation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.AffineTransformation(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds an affine transformation matrix.
            </summary>
            <param name="scaling">Vector of scaling factors for each dimension.</param>
            <param name="rotationOrigin">Point identifying the center of rotation.</param>
            <param name="rotationQuaternion">Rotation factors.</param>
            <param name="translation">Translation offsets.</param>
            <returns>Returns the affine transformation matrix, built from the scaling, rotation, and translation information.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Reflect(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a transformation matrix designed to reflect vectors through a given plane.
            </summary>
            <param name="reflectionPlane">Plane to reflect through.</param>
            <returns>Returns the transformation matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Shadow(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a transformation matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Reference plane.</param>
            <param name="lightPosition">4D vector describing the light's position. If the light's w-component is 0.0f, the ray from the origin to the light represents a directional light. If it is 1.0f, the light is a point light.</param>
            <returns>Returns the transformation matrix that flattens the geometry into the plane ShadowPlane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LookAtLH(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point.
            </summary>
            <param name="eyePosition">Position of the camera.</param>
            <param name="focusPosition">Position of the focal point.</param>
            <param name="directionUp">Up direction of the camera.</param>
            <returns>Returns a view matrix that transforms a point from world space into view space.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LookAtRH(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point.
            </summary>
            <param name="eyePosition">Position of the camera.</param>
            <param name="focusPosition">Position of the focal point.</param>
            <param name="directionUp">Up direction of the camera.</param>
            <returns>Returns a view matrix that transforms a point from world space into view space.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LookToLH(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction.
            </summary>
            <param name="eyePosition">Position of the camera.</param>
            <param name="eyeDirection">Direction of the camera.</param>
            <param name="directionUp">Up direction of the camera.</param>
            <returns>Returns a view matrix that transforms a point from world space into view space.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.LookToRH(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction.
            </summary>
            <param name="eyePosition">Position of the camera.</param>
            <param name="eyeDirection">Direction of the camera.</param>
            <param name="directionUp">Up direction of the camera.</param>
            <returns>Returns a view matrix that transforms a point from world space into view space.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix.
            </summary>
            <param name="viewWidth">Width of the frustum at the near clipping plane.</param>
            <param name="viewHeight">Height of the frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a right-handed perspective projection matrix.
            </summary>
            <param name="viewWidth">Width of the frustum at the near clipping plane.</param>
            <param name="viewHeight">Height of the frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view.
            </summary>
            <param name="fovAngleY">Top-down field-of-view angle in radians.</param>
            <param name="aspectHByW">Aspect ratio of view-space X:Y.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a right-handed perspective projection matrix based on a field of view.
            </summary>
            <param name="fovAngleY">Top-down field-of-view angle in radians.</param>
            <param name="aspectHByW">Aspect ratio of view-space X:Y.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a custom version of a left-handed perspective projection matrix.
            </summary>
            <param name="viewLeft">The x-coordinate of the left side of the clipping frustum at the near clipping plane.</param>
            <param name="viewRight">The x-coordinate of the right side of the clipping frustum at the near clipping plane.</param>
            <param name="viewBottom">The y-coordinate of the bottom side of the clipping frustum at the near clipping plane.</param>
            <param name="viewTop">The y-coordinate of the top side of the clipping frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the custom perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a custom version of a right-handed perspective projection matrix.
            </summary>
            <param name="viewLeft">The x-coordinate of the left side of the clipping frustum at the near clipping plane.</param>
            <param name="viewRight">The x-coordinate of the right side of the clipping frustum at the near clipping plane.</param>
            <param name="viewBottom">The y-coordinate of the bottom side of the clipping frustum at the near clipping plane.</param>
            <param name="viewTop">The y-coordinate of the top side of the clipping frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the custom perspective projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.OrthographicLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds an orthogonal projection matrix for a left-handed coordinate system.
            </summary>
            <param name="viewWidth">Width of the frustum at the near clipping plane.</param>
            <param name="viewHeight">Height of the frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the orthogonal projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.OrthographicRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds an orthogonal projection matrix for a right-handed coordinate system.
            </summary>
            <param name="viewWidth">Width of the frustum at the near clipping plane.</param>
            <param name="viewHeight">Height of the frustum at the near clipping plane.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the orthogonal projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.OrthographicOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a custom orthogonal projection matrix for a left-handed coordinate system.
            </summary>
            <param name="viewLeft">Minimum x-value of the view volume.</param>
            <param name="viewRight">Maximum x-value of the view volume.</param>
            <param name="viewBottom">Minimum y-value of the view volume.</param>
            <param name="viewTop">Maximum y-value of the view volume.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the custom orthogonal projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.OrthographicOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a custom orthogonal projection matrix for a right-handed coordinate system.
            </summary>
            <param name="viewLeft">Minimum x-value of the view volume.</param>
            <param name="viewRight">Maximum x-value of the view volume.</param>
            <param name="viewBottom">Minimum y-value of the view volume.</param>
            <param name="viewTop">Maximum y-value of the view volume.</param>
            <param name="nearZ">Distance to the near clipping plane.</param>
            <param name="farZ">Distance to the far clipping plane.</param>
            <returns>Returns the custom orthogonal projection matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Plus(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Performance an identity operation on a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Returns the matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Negate(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the negation of a matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Returns the negation of the matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Add(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the sum of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns a matrix that is the sum of the two matrices.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Subtract(JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes the difference of two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>Returns a matrix that is the difference of the two matrices.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Equals(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.ToArray">
            <summary>
            Convert a matrix to an array of float.
            </summary>
            <returns>An array of float.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.StoreFloat3X3(JeremyAnsel.DirectX.DXMath.XMFloat3X3@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3X3"/>.
            </summary>
            <param name="destination">The destination structure</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.StoreFloat4X3(JeremyAnsel.DirectX.DXMath.XMFloat4X3@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X3"/>.
            </summary>
            <param name="destination">The destination structure</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.StoreFloat4X4(JeremyAnsel.DirectX.DXMath.XMFloat4X4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMMatrix"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4X4"/>.
            </summary>
            <param name="destination">The destination structure</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.IsNaN">
            <summary>
            Tests whether any of the elements of a matrix are NaN.
            </summary>
            <returns>Returns true if any element of M is NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.IsInfinite">
            <summary>
            Tests whether any of the elements of a matrix are positive or negative infinity.
            </summary>
            <returns>Returns true if any element of M is either positive or negative infinity, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.IsIdentity">
            <summary>
            Tests whether a matrix is the identity matrix.
            </summary>
            <returns>Returns true if M is the identity matrix, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Transpose">
            <summary>
            Computes the transpose of a matrix.
            </summary>
            <returns>Returns the transpose.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Inverse(JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Computes the inverse of a matrix.
            </summary>
            <param name="determinant">A vector, each of whose components is the determinant of M.</param>
            <returns>Returns the matrix inverse of M. If there is no inverse (that is, if the determinant is 0), returns an infinite matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Inverse">
            <summary>
            Computes the inverse of a matrix.
            </summary>
            <returns>Returns the matrix inverse of M. If there is no inverse (that is, if the determinant is 0), returns an infinite matrix.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Determinant">
            <summary>
            Computes the determinant of a matrix.
            </summary>
            <returns>Returns a vector. The determinant of M is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.Decompose(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Breaks down a general 3D transformation matrix into its scalar, rotational, and translational components.
            </summary>
            <param name="scale">The scaling factors applied along the x, y, and z-axes.</param>
            <param name="rotationQuaternion">A quaternion that describes the rotation.</param>
            <param name="translation">A translation along the x, y, and z-axes.</param>
            <returns>If the function succeeds, the return value is true. If the function fails, the return value is false.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMMatrix.RankDecompose(System.Int32@,System.Int32@,System.Int32@,System.Single,System.Single,System.Single)">
            <summary>
            Decompose a matrix by ranks.
            </summary>
            <param name="a">The first rank.</param>
            <param name="b">The second rank.</param>
            <param name="c">The third rank.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMPermutation">
            <summary>
            Constants used as an element index with <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector.Permute(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute0X">
            <summary>
            indicates that the X component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute0Y">
            <summary>
            This indicates that the Y component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute0Z">
            <summary>
            This indicates that the Z component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute0W">
            <summary>
            This indicates that the W component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute1X">
            <summary>
            This indicates that the X component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute1Y">
            <summary>
            This indicates that the Y component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute1Z">
            <summary>
            This indicates that the Z component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMPermutation.Permute1W">
            <summary>
            This indicates that the W component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMPlane">
            <summary>
            The plane functions provided by DirectXMath.
            </summary>
            <remarks>
            These functions use an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> 4-vector to represent the coefficients of the plane equation, <c>Ax+By+Cz+D = 0</c>, where the X-component is A, the Y-component is B, the Z-component is C, and the W-component is D.
            </remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Determines if two planes are equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>Returns true if the two planes are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.NearEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Determines whether two planes are nearly equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <param name="epsilon">the component-wise tolerance to use.</param>
            <returns>Returns true if P1 is nearly equal to P2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Determines if two planes are unequal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>Returns true if the two planes are unequal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any of the coefficients of a plane is a NaN.
            </summary>
            <param name="p">The plane.</param>
            <returns>Returns true if any of the coefficients of the plane is a NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any of the coefficients of a plane is positive or negative infinity.
            </summary>
            <param name="p">The plane.</param>
            <returns>Returns true if any of the coefficients of the plane is positive or negative infinity, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.Dot(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Calculates the dot product between an input plane and a 4D vector.
            </summary>
            <param name="p">The plane.</param>
            <param name="v">The 4D vector to use in the dot product.</param>
            <returns>Returns the dot product of P and V replicated into each of the four components of the returned <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.DotCoord(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Calculates the dot product between an input plane and a 3D vector.
            </summary>
            <param name="p">The plane.</param>
            <param name="v">3D vector to use in the dot product. The w component of V is always treated as if is 1.0f.</param>
            <returns>Returns the dot product between P and V replicated into each of the four components of the returned <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.DotNormal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Calculates the dot product between the normal vector of a plane and a 3D vector.
            </summary>
            <param name="p">The plane.</param>
            <param name="v">3D vector to use in the dot product. The w component of V is always treated as if is 0.0f.</param>
            <returns>Returns the dot product between the normal vector of the plane and V replicated into each of the four components of the returned <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.NormalizeEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the coefficients of a plane so that coefficients of x, y, and z form a unit normal vector.
            </summary>
            <param name="p">The plane.</param>
            <returns>Returns an estimation of the normalized plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.Normalize(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Normalizes the coefficients of a plane so that coefficients of x, y, and z form a unit normal vector.
            </summary>
            <param name="p">The plane.</param>
            <returns>Returns the normalized plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.IntersectLine(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Finds the intersection between a plane and a line.
            </summary>
            <param name="p">The plane</param>
            <param name="linePoint1">The first point on the line.</param>
            <param name="linePoint2">The second point on the line.</param>
            <returns>Returns the intersection of the plane P and the line defined by LinePoint1 and LinePoint2. If the line is parallel to the plane, all components of the returned vector are equal to QNaN.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.IntersectPlane(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Finds the intersection of two planes.
            </summary>
            <param name="linePoint1">One point on the line of intersection.</param>
            <param name="linePoint2">A second point on the line of intersection.</param>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.Transform(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a plane by a given matrix.
            </summary>
            <param name="p">The plane.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.FromPointNormal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the equation of a plane constructed from a point in the plane and a normal vector.
            </summary>
            <param name="point">A point in the plane.</param>
            <param name="normal">The normal to the plane.</param>
            <returns>Returns a vector whose components are the coefficients of the plane.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMPlane.FromPoints(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the equation of a plane constructed from three points in the plane.
            </summary>
            <param name="point1">A first point in the plane.</param>
            <param name="point2">A second point in the plane.</param>
            <param name="point3">A third point in the plane.</param>
            <returns>Returns a vector whose components are the coefficients of the plane.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMQuaternion">
            <summary>
            The quaternion functions provided by DirectXMath.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMQuaternion.Identity">
            <summary>
            Gets the identity quaternion.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two quaternions are equal.
            </summary>
            <param name="q1">The first quaternion to test.</param>
            <param name="q2">The second quaternion to test.</param>
            <returns>Returns true if the quaternions are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two quaternions are not equal.
            </summary>
            <param name="q1">The first quaternion to test.</param>
            <param name="q2">The second quaternion to test.</param>
            <returns>Returns true if the quaternions are unequal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether any component of a quaternion is a NaN.
            </summary>
            <param name="q">The quaternion to test.</param>
            <returns>Returns true if any component of Q is a NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether any component of a quaternion is either positive or negative infinity.
            </summary>
            <param name="q">The quaternion to test.</param>
            <returns>Returns true if any component of Q is positive or negative infinity,and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.IsIdentity(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether a specific quaternion is the identity quaternion.
            </summary>
            <param name="q">The quaternion to test.</param>
            <returns>Returns true if Q is the identity quaternion, or false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Dot(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the dot product of two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>Returns a vector. The dot product between Q1 and Q2 is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Multiply(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the product of two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>Returns the product of the two quaternions.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.LengthSquare(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the square of the magnitude of a quaternion.
            </summary>
            <param name="q">The quaternion to measure.</param>
            <returns>Returns a vector. The square of the magnitude is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.ReciprocalLength(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the reciprocal of the magnitude of a quaternion.
            </summary>
            <param name="q">The quaternion to measure.</param>
            <returns>Returns the reciprocal of the magnitude of Q.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Length(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the magnitude of a quaternion.
            </summary>
            <param name="q">The quaternion to measure.</param>
            <returns>Returns a vector. The magnitude of Q is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.NormalizeEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the normalized version of a quaternion.
            </summary>
            <param name="q">The quaternion.</param>
            <returns>The estimate of the normalized version of a quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Normalize(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Normalizes a quaternion.
            </summary>
            <param name="q">The quaternion.</param>
            <returns>The normalized form of the quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Conjugate(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the conjugate of a quaternion.
            </summary>
            <param name="q">The quaternion to conjugate.</param>
            <returns>The conjugate of the quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Inverse(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the inverse of a quaternion.
            </summary>
            <param name="q">The quaternion to invert.</param>
            <returns>The inverse of Q.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Ln(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the natural logarithm of a given unit quaternion.
            </summary>
            <param name="q">Unit quaternion for which to calculate the natural logarithm. If Q is not a unit quaternion, the returned value is undefined.</param>
            <returns>The natural logarithm of Q.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Exp(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the exponential of a given pure quaternion.
            </summary>
            <param name="q">Pure quaternion for which to compute the exponential. The w-component of the input quaternion is ignored in the calculation.</param>
            <returns>Returns the exponential of Q.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Slerp(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Interpolates between two unit quaternions, using spherical linear interpolation.
            </summary>
            <param name="q0">An unit quaternion to interpolate from.</param>
            <param name="q1">An unit quaternion to interpolate to.</param>
            <param name="t">The interpolation control factor.</param>
            <returns>Returns the interpolated quaternion. If Q0 and Q1 are not unit quaternions, the resulting interpolation is undefined.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.SlerpV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Interpolates between two unit quaternions, using spherical linear interpolation.
            </summary>
            <param name="q0">An unit quaternion to interpolate from.</param>
            <param name="q1">An unit quaternion to interpolate to.</param>
            <param name="t">The interpolation control factor. All components of this vector must be the same.</param>
            <returns>Returns the interpolated quaternion. If Q0 and Q1 are not unit quaternions, the resulting interpolation is undefined.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.Squad(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Interpolates between four unit quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="q0">The first unit quaternion.</param>
            <param name="q1">The second unit quaternion.</param>
            <param name="q2">The third unit quaternion.</param>
            <param name="q3">The fourth unit quaternion.</param>
            <param name="t">The interpolation control factor.</param>
            <returns>Returns the interpolated quaternion. If Q0, Q1, Q2, and Q3 are not all unit quaternions, the returned quaternion is undefined.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.SquadV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Interpolates between four unit quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="q0">The first unit quaternion.</param>
            <param name="q1">The second unit quaternion.</param>
            <param name="q2">The third unit quaternion.</param>
            <param name="q3">The fourth unit quaternion.</param>
            <param name="t">The interpolation control factor. All components of this vector must be the same.</param>
            <returns>Returns the interpolated quaternion. If Q0, Q1, Q2, and Q3 are not unit quaternions, the resulting interpolation is undefined.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.SquadSetup(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Provides addresses of setup control points for spherical quadrangle interpolation.
            </summary>
            <param name="a">The first setup quaternion.</param>
            <param name="b">The second setup quaternion.</param>
            <param name="c">The third setup quaternion.</param>
            <param name="q0">The first quaternion.</param>
            <param name="q1">The second quaternion.</param>
            <param name="q2">The third quaternion.</param>
            <param name="q3">The fourth quaternion.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.BaryCentric(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single)">
            <summary>
            Returns a point in barycentric coordinates, using the specified quaternions.
            </summary>
            <param name="q0">The first quaternion in the triangle.</param>
            <param name="q1">The second quaternion in the triangle.</param>
            <param name="q2">The third quaternion in the triangle.</param>
            <param name="f">The first weighting factor.</param>
            <param name="g">The second weighting factor.</param>
            <returns>Returns a quaternion in barycentric coordinates.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.BaryCentricV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Returns a point in barycentric coordinates, using the specified quaternions.
            </summary>
            <param name="q0">The first quaternion in the triangle.</param>
            <param name="q1">The second quaternion in the triangle.</param>
            <param name="q2">The third quaternion in the triangle.</param>
            <param name="f">The first weighting factor. All components of this vector must be the same.</param>
            <param name="g">The second weighting factor. All components of this vector must be the same.</param>
            <returns>Returns a quaternion in barycentric coordinates.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.RotationRollPitchYaw(System.Single,System.Single,System.Single)">
            <summary>
            Computes a rotation quaternion based on the pitch, yaw, and roll (Euler angles).
            </summary>
            <param name="pitch">Angle of rotation around the x-axis, in radians.</param>
            <param name="yaw">Angle of rotation around the y-axis, in radians.</param>
            <param name="roll">Angle of rotation around the z-axis, in radians.</param>
            <returns>Returns the rotation quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.RotationRollPitchYawFromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes a rotation quaternion based on a vector containing the Euler angles (pitch, yaw, and roll).
            </summary>
            <param name="angles">A 3D vector containing the Euler angles in the order pitch, yaw, roll.</param>
            <returns>Returns the rotation quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.RotationNormal(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Computes the rotation quaternion about a normal vector.
            </summary>
            <param name="normalAxis">Normal vector describing the axis of rotation.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.RotationAxis(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Computes a rotation quaternion about an axis.
            </summary>
            <param name="axis">3D vector describing the axis of rotation.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>Returns the rotation quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.RotationMatrix(JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Computes a rotation quaternion from a rotation matrix.
            </summary>
            <param name="m">The rotation matrix.</param>
            <returns>Returns the rotation quaternion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMQuaternion.ToAxisAngle(JeremyAnsel.DirectX.DXMath.XMVector@,System.Single@,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes an axis and angle of rotation about that axis for a given quaternion.
            </summary>
            <param name="axis">A 3D vector describing the axis of rotation for the quaternion Q.</param>
            <param name="angle">The radian angle of rotation for the quaternion Q.</param>
            <param name="q">The quaternion to measure.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMScalar">
            <summary>
            The scalar functions provided by DirectXMath.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.NearEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines if two floating-point values are nearly equal.
            </summary>
            <param name="s1">The first floating-point value to compare.</param>
            <param name="s2">The second floating-point value to compare.</param>
            <param name="epsilon">The tolerance to use when comparing S1 and S2.</param>
            <returns>Returns true if the absolute value of the difference between S1 and S2 is less than or equal to Epsilon. Returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.ModAngle(System.Single)">
            <summary>
            Computes an angle between -XM_PI and XM_PI.
            </summary>
            <param name="angle">The radian angle.</param>
            <returns>Returns an angle greater than or equal to -XM_PI and less than XM_PI that is congruent to Value modulo 2pi.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.Sin(System.Single)">
            <summary>
            Computes the sine of a radian angle.
            </summary>
            <param name="value">The radian angle.</param>
            <returns>Returns the sine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.SinEst(System.Single)">
            <summary>
            Estimates the sine of a radian angle.
            </summary>
            <param name="value">The radian angle.</param>
            <returns>Returns an estimate of the sine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.Cos(System.Single)">
            <summary>
            Computes the cosine of a radian angle.
            </summary>
            <param name="value">The radian angle.</param>
            <returns>Returns the cosine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.CosEst(System.Single)">
            <summary>
            Estimates the cosine of a radian angle.
            </summary>
            <param name="value">The radian angle.</param>
            <returns>Returns the cosine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.SinCos(System.Single@,System.Single@,System.Single)">
            <summary>
            Computes both the sine and cosine of a radian angle.
            </summary>
            <param name="sin">The sine of Value.</param>
            <param name="cos">The cosine of Value.</param>
            <param name="value">The radian angle.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.SinCosEst(System.Single@,System.Single@,System.Single)">
            <summary>
            Estimates both the sine and cosine of a radian angle.
            </summary>
            <param name="sin">The sine of Value.</param>
            <param name="cos">The cosine of Value.</param>
            <param name="value">The radian angle.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.ASin(System.Single)">
            <summary>
            Computes the arcsine of a floating-point number.
            </summary>
            <param name="value">A value between -1.0f and 1.0f.</param>
            <returns>Returns the inverse sine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.ASinEst(System.Single)">
            <summary>
            Estimates the arcsine of a floating-point number.
            </summary>
            <param name="value">A value between -1.0f and 1.0f.</param>
            <returns>Returns the inverse sine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.ACos(System.Single)">
            <summary>
            Computes the arccosine of a floating-point number.
            </summary>
            <param name="value">A value between -1.0f and 1.0f.</param>
            <returns>Returns the inverse cosine of Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMScalar.ACosEst(System.Single)">
            <summary>
            Estimates the arccosine of a floating-point number.
            </summary>
            <param name="value">A value between -1.0f and 1.0f.</param>
            <returns>Returns the inverse cosine of Value.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMSelection">
            <summary>
            Constants used to construct a control vector used with <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector.Select(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSelection.Select0">
            <summary>
            Indicates that the component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to its index in the control vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSelection.Select1">
            <summary>
            Indicates that the component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to its index in the control vector.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMSwizzle">
            <summary>
            Constants used as an element index with <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector.Swizzle(JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSwizzle.X">
            <summary>
            Indicates that the X component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSwizzle.Y">
            <summary>
            Indicates that the Y component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSwizzle.Z">
            <summary>
            Indicates that the Z component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMSwizzle.W">
            <summary>
            Indicates that the W component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMUInt2">
            <summary>
            A 2D vector where each component is an unsigned integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt2.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt2.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt2.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt2.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMUInt2)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMUInt2">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.op_Equality(JeremyAnsel.DirectX.DXMath.XMUInt2,JeremyAnsel.DirectX.DXMath.XMUInt2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.op_Inequality(JeremyAnsel.DirectX.DXMath.XMUInt2,JeremyAnsel.DirectX.DXMath.XMUInt2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.Equals(JeremyAnsel.DirectX.DXMath.XMUInt2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt2.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMUInt3">
            <summary>
            A 3D vector where each component is an unsigned integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt3.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt3.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt3.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt3.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt3.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt3.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMUInt3)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMUInt3">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.op_Equality(JeremyAnsel.DirectX.DXMath.XMUInt3,JeremyAnsel.DirectX.DXMath.XMUInt3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.op_Inequality(JeremyAnsel.DirectX.DXMath.XMUInt3,JeremyAnsel.DirectX.DXMath.XMUInt3)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.Equals(JeremyAnsel.DirectX.DXMath.XMUInt3)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt3.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMUInt4">
            <summary>
            A 4D vector where each component is an unsigned integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt4.x">
            <summary>
            The x-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt4.y">
            <summary>
            The y-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt4.z">
            <summary>
            The z-coordinate of the vector.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMUInt4.w">
            <summary>
            The w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> struct.
            </summary>
            <param name="x">The x-coordinate of the vector.</param>
            <param name="y">The y-coordinate of the vector.</param>
            <param name="z">The z-coordinate of the vector.</param>
            <param name="w">The w-coordinate of the vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> struct.
            </summary>
            <param name="array">The components of the vector.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt4.X">
            <summary>
            Gets or sets the x-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt4.Y">
            <summary>
            Gets or sets the y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt4.Z">
            <summary>
            Gets or sets the z-coordinate of the vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMUInt4.W">
            <summary>
            Gets or sets the w-coordinate of the vector.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMUInt4)~JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~JeremyAnsel.DirectX.DXMath.XMUInt4">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.op_Equality(JeremyAnsel.DirectX.DXMath.XMUInt4,JeremyAnsel.DirectX.DXMath.XMUInt4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.op_Inequality(JeremyAnsel.DirectX.DXMath.XMUInt4,JeremyAnsel.DirectX.DXMath.XMUInt4)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.FromVector(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.
            </summary>
            <param name="value">A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.Equals(JeremyAnsel.DirectX.DXMath.XMUInt4)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMUInt4.ToVector">
            <summary>
            Converts a <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> to a <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMVector">
            <summary>
            A vector of four 32-bit floating-point or integer components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMVector.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMVector.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMVector.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.DXMath.XMVector.w">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <param name="w">The w component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> struct.
            </summary>
            <param name="array">The components.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> struct.
            </summary>
            <param name="array">The components.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> struct.
            </summary>
            <param name="array">The components.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> struct.
            </summary>
            <param name="array">The components.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Zero">
            <summary>
            Gets the zero vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.TrueInt">
            <summary>
            Gets a vector, each of whose components represents true (0xFFFFFFFF).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.FalseInt">
            <summary>
            Gets the zero (false) vector.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.One">
            <summary>
            Gets a vector, each of whose components are one.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Infinity">
            <summary>
            Gets a vector, each of whose components are infinity (0x7F800000).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.QNaN">
            <summary>
            Gets a vector, each of whose components are QNaN (0x7CF00000).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Epsilon">
            <summary>
            Gets a vector, each of whose components are epsilon (1.192092896e-7).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.SignMask">
            <summary>
            Gets a vector, each of whose components are the sign mask (0x80000000).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.X">
            <summary>
            Gets or sets the x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Y">
            <summary>
            Gets or sets the y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Z">
            <summary>
            Gets or sets the z component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.W">
            <summary>
            Gets or sets the w component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.IntX">
            <summary>
            Gets or sets the x component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.IntY">
            <summary>
            Gets or sets the y component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.IntZ">
            <summary>
            Gets or sets the z component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.IntW">
            <summary>
            Gets or sets the w component.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.DXMath.XMVector.Item(System.Int32)">
            <summary>
            Gets or sets a component by index.
            </summary>
            <param name="index">The index of the component.</param>
            <returns>A float value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_UnaryPlus(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performance an identity operation on a vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns the vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_UnaryNegation(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the negation of a vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns the negation of the vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Addition(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the sum of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector that is the sum of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Subtraction(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the difference of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector that is the difference of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Multiply(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the per-component product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector, each of whose components is the product of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Division(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Divides one instance of XMVECTOR by a second instance, returning the result in a third instance.
            </summary>
            <param name="v1">The dividends.</param>
            <param name="v2">The divisors.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Multiply(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Scalar multiplies a vector by a floating-point value.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">A scalar value.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Multiply(System.Single,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Scalar multiplies a vector by a floating-point value.
            </summary>
            <param name="s">A scalar value.</param>
            <param name="v">The vector.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Division(JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Divides a vector by a scalar value, returning the result in a third instance.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">A scalar value.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Implicit(JeremyAnsel.DirectX.DXMath.XMVector)~System.Single[]">
            <summary>
            Convert a vector to an array of float.
            </summary>
            <param name="value">The vector.</param>
            <returns>An array of float.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Equality(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.op_Inequality(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromBinaryConstant(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a vector, each of whose components is either 0.0f or 1.0f.
            </summary>
            <param name="c0">This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C0 is 0, the x-component of the returned vector will be 0.0f. Otherwise, the x-component will be 1.0f.</param>
            <param name="c1">This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C1 is 0, the y-component of the returned vector will be 0.0f. Otherwise, the y-component will be 1.0f.</param>
            <param name="c2">This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C2 is 0, the z-component of the returned vector will be 0.0f. Otherwise, the z-component will be 1.0f.</param>
            <param name="c3">This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C3 is 0, the w-component of the returned vector will be 0.0f. Otherwise, the w-component will be 1.0f.</param>
            <returns>Returns a vector, each of whose components is either 0.0f or 1.0f.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromBinaryConstant(System.UInt32[])">
            <summary>
            Creates a vector, each of whose components is either 0.0f or 1.0f.
            </summary>
            <param name="constants">An array of binary number.</param>
            <returns>Returns a vector, each of whose components is either 0.0f or 1.0f.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromSplatConstant(System.Int32,System.UInt32)">
            <summary>
            Creates a vector with identical floating-point components. Each component is a constant divided by two raised to an integer exponent.
            </summary>
            <param name="intConstant">This value will be converted to a floating-point number and divided by two raised to the <paramref name="divExponent"/> power. The result is replicated to each component of the returned vector.</param>
            <param name="divExponent">Describes the exponent applied to the quotient. This parameter must be a number (an immediate value) and not a variable.</param>
            <returns>Returns a vector with identical floating-point components. Each component is a constant divided by two raised to an integer exponent.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromSplatConstantInt(System.Int32)">
            <summary>
            Creates a vector with identical integer components.
            </summary>
            <param name="intConstant">Value to replicate to each component of the returned vector.</param>
            <returns>Returns a vector, each of whose components is <paramref name="intConstant"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadInt(System.UInt32)">
            <summary>
            Loads a scalar value into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The scalar data to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadFloat(System.Single)">
            <summary>
            Loads a floating-point scalar value into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The scalar data to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadInt2(System.UInt32[])">
            <summary>
            Loads data into the x and y components of an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The data to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadFloat2(JeremyAnsel.DirectX.DXMath.XMFloat2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadSInt2(JeremyAnsel.DirectX.DXMath.XMInt2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadUInt2(JeremyAnsel.DirectX.DXMath.XMUInt2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadInt3(System.UInt32[])">
            <summary>
            Loads data into the x, y, and z components of an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The data to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadFloat3(JeremyAnsel.DirectX.DXMath.XMFloat3)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadSInt3(JeremyAnsel.DirectX.DXMath.XMInt3)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadUInt3(JeremyAnsel.DirectX.DXMath.XMUInt3)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadInt4(System.UInt32[])">
            <summary>
            Loads data into the x, y, z, and w components of an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The data to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadFloat4(JeremyAnsel.DirectX.DXMath.XMFloat4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadSInt4(JeremyAnsel.DirectX.DXMath.XMInt4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LoadUInt4(JeremyAnsel.DirectX.DXMath.XMUInt4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="source">The struct to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a vector using four floating-point values.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <param name="w">The w component.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.FromInt(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a vector with unsigned integer components.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <param name="w">The w component.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Replicate(System.Single)">
            <summary>
            Replicates a floating-point value into all four components of a vector.
            </summary>
            <param name="value">The value to replicate.</param>
            <returns>Returns a vector, all of whose components are equal to Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ReplicateInt(System.UInt32)">
            <summary>
            Replicates an integer value into all four components of a vector.
            </summary>
            <param name="value">The value to replicate.</param>
            <returns>Returns a vector, all of whose components are equal to Value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SplatX(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Replicates the x component of a vector to all of the components.
            </summary>
            <param name="v">Vector from which to select the x component.</param>
            <returns>Returns a vector, all of whose components are equal to the x component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SplatY(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Replicates the y component of a vector to all of the components.
            </summary>
            <param name="v">Vector from which to select the y component.</param>
            <returns>Returns a vector, all of whose components are equal to the y component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SplatZ(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Replicates the z component of a vector to all of the components.
            </summary>
            <param name="v">Vector from which to select the z component.</param>
            <returns>Returns a vector, all of whose components are equal to the z component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SplatW(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Replicates the w component of a vector to all of the components.
            </summary>
            <param name="v">Vector from which to select the w component.</param>
            <returns>Returns a vector, all of whose components are equal to the w component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Permute(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation,JeremyAnsel.DirectX.DXMath.XMPermutation)">
            <summary>
            Permutes the components of two vectors to create a new vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="permuteX">Index indicating where the X component of the new vector should be copied from.</param>
            <param name="permuteY">Index indicating where the Y component of the new vector should be copied from.</param>
            <param name="permuteZ">Index indicating where the Z component of the new vector should be copied from.</param>
            <param name="permuteW">Index indicating where the W component of the new vector should be copied from.</param>
            <returns>Returns the permuted vector that resulted from combining the source vectors.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SelectControl(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Defines a control vector for use in <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector.Select(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)"/>.
            </summary>
            <param name="index0">Index that determines which vector will be selected to set the X component.</param>
            <param name="index1">Index that determines which vector will be selected to set the Y component.</param>
            <param name="index2">Index that determines which vector will be selected to set the Z component.</param>
            <param name="index3">Index that determines which vector will be selected to set the W component.</param>
            <returns>Returns the control vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SelectControl(System.UInt32[])">
            <summary>
            Defines a control vector for use in <see cref="M:JeremyAnsel.DirectX.DXMath.XMVector.Select(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)"/>.
            </summary>
            <param name="indexes">Indexes that determines which vector will be selected.</param>
            <returns>Returns the control vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Select(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component selection between two input vectors and returns the resulting vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="control">Vector mask used to select a vector component from either V1 or V2.</param>
            <returns>Returns the result of the per-component selection.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.MergeXY(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Creates a new vector by combining the x and y-components of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns the merged vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.MergeZW(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Creates a new vector by combining the z and w-components of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns the merged vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ShiftLeft(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.UInt32)">
            <summary>
            Shifts a vector left by a given number of 32-bit elements, filling the vacated elements with elements from a second vector.
            </summary>
            <param name="v1">Vector to shift left.</param>
            <param name="v2">Vector used to fill in the vacated components of V1 after it is shifted left.</param>
            <param name="elements">Number of 32-bit elements by which to shift V left. This parameter must be 0, 1, 2, or 3.</param>
            <returns>Returns the shifted and filled in vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Insert(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Rotates a vector left by a given number of 32-bit components and insert selected elements of that result into another vector.
            </summary>
            <param name="vd">Vector to insert into.</param>
            <param name="vs">Vector to rotate left.</param>
            <param name="leftRotateElements">Number of 32-bit components by which to rotate VS left.</param>
            <param name="select0">Either 0 or 1. If one, the x-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the x-component of VD is left alone.</param>
            <param name="select1">Either 0 or 1. If one, the y-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the y-component of VD is left alone.</param>
            <param name="select2">Either 0 or 1. If one, the z-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the z-component of VD is left alone.</param>
            <param name="select3">Either 0 or 1. If one, the w-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the w-component of VD is left alone.</param>
            <returns>Returns the vector that results from the rotation and insertion.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for equality of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.EqualR(JeremyAnsel.DirectX.DXMath.XMComparisonRecord@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for equality of two vectors and sets a comparison value.
            </summary>
            <param name="record">A comparison value.</param>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for the equality of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.EqualIntR(JeremyAnsel.DirectX.DXMath.XMComparisonRecord@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for equality of two vectors, treating each component as an unsigned integer. In addition, this function sets a comparison value.
            </summary>
            <param name="record">A comparison value.</param>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.NearEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for equality of two vectors within a given threshold.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="epsilon">Tolerance value used for judging equality.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for the inequality of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.NotEqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for the inequality of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Greater(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for greater-than between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GreaterR(JeremyAnsel.DirectX.DXMath.XMComparisonRecord@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for greater-than between two vectors and sets a comparison value.
            </summary>
            <param name="record">A comparison value.</param>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GreaterOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for greater-than-or-equal between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GreaterOrEqualR(JeremyAnsel.DirectX.DXMath.XMComparisonRecord@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for greater-than-or-equal between two vectors and sets a comparison value.
            </summary>
            <param name="record">A comparison value.</param>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Less(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for less-than between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LessOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a per-component test for less-than-or-equal between two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Min(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Makes a per-component comparison between two vectors, and returns a vector containing the smallest components.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the smallest components between the two vectors.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Max(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Makes a per-component comparison between two vectors, and returns a vector containing the largest components.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector containing the largest components between the two vectors.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.AndInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the logical AND of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector each of whose components are the logical AND of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.AndComplementInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the logical AND of one vector with the negation of a second vector, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector whose components are the logical AND of each of the components of V1 with the negation of the corresponding components of V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.OrInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the logical OR of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector, each of whose components are the logical OR of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.NorInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the logical NOR of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector, each of whose components are the logical NOR of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.XorInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the logical XOR of two vectors, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector, each of whose components are the logical XOR of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Add(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the sum of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector that is the sum of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.AddAngles(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Adds two vectors representing angles.
            </summary>
            <param name="v1">First vector of angles. Each angle must satisfy <c>-XM_PI &lt;= V1 &lt; XM_PI.</c></param>
            <param name="v2">Second vector of angles. Each angle must satisfy -XM_2PI &lt;= V2 &lt; XM_2PI.</param>
            <returns>Returns a vector whose components are the sums of the angles of the corresponding components. Each component of the returned vector will be an angle less than XM_PI and greater than or equal to -XM_PI.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Subtract(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the difference of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector that is the difference of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SubtractAngles(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Subtracts two vectors representing angles.
            </summary>
            <param name="v1">First vector of angles. Each angle must satisfy -XM_PI &lt;= V1 &lt; XM_PI.</param>
            <param name="v2">Second vector of angles. Each angle must satisfy -XM_2PI &lt;= V1 &lt; XM_2PI.</param>
            <returns>Returns a vector whose components are the differences of the angles of the corresponding components. Each component of the returned vector will be an angle less than XM_PI and greater than or equal to -XM_PI.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Multiply(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the per-component product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector, each of whose components is the product of the corresponding components of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.MultiplyAdd(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the product of the first two vectors added to the third vector.
            </summary>
            <param name="v1">The vector multiplier.</param>
            <param name="v2">The vector multiplicand.</param>
            <param name="v3">The vector addend.</param>
            <returns>Returns the product-sum of the vectors.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Divide(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Divides one instance of XMVECTOR by a second instance, returning the result in a third instance.
            </summary>
            <param name="v1">The dividends.</param>
            <param name="v2">The divisors.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.NegativeMultiplySubtract(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the difference of a third vector and the product of the first two vectors.
            </summary>
            <param name="v1">The vector multiplier.</param>
            <param name="v2">The vector multiplicand.</param>
            <param name="v3">The vector subtrahend.</param>
            <returns>Returns the resulting vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Pow(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes V1 raised to the power of V2.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. Each component is the corresponding component of V1 raised to the power of the corresponding component in V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Mod(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the per-component floating-point remainder of the quotient of two vectors.
            </summary>
            <param name="v1">The vector dividend.</param>
            <param name="v2">The vector divisor.</param>
            <returns>Returns a vector whose components are the floating-point remainders of the divisions.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ModAngles(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the per-component angle modulo 2PI.
            </summary>
            <param name="angles">The vector of angle components.</param>
            <returns>Returns a vector whose components are the corresponding components of Angles modulo 2PI.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ATan2(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the arctangent of Y/ X.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>Returns a vector. Each component is the arctangent of the corresponding Y component divided by the corresponding X component. Each component is in the range (-PI/2, PI/2).</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ATan2Est(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the arctangent of Y/ X.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>Returns a vector. Each component is an estimate of the arctangent of the corresponding Y component divided by the corresponding X component. Each component is in the range (-PI/2, PI/2).</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Lerp(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="v0">The first vector.</param>
            <param name="v1">The second vector.</param>
            <param name="t">The interpolation control factor.</param>
            <returns>Returns a vector containing the interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LerpV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="v0">The first vector.</param>
            <param name="v1">The second vector.</param>
            <param name="t">The interpolating control factor for the corresponding components of the position.</param>
            <returns>Returns a vector containing the interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Hermite(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Performs a Hermite spline interpolation, using the specified vectors.
            </summary>
            <param name="position0">First position to interpolate from.</param>
            <param name="tangent0">Tangent vector for the first position.</param>
            <param name="position1">Second position to interpolate from.</param>
            <param name="tangent1">Tangent vector for the second position.</param>
            <param name="t">Interpolation control factor.</param>
            <returns>Returns a vector containing the interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.HermiteV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a Hermite spline interpolation, using the specified vectors.
            </summary>
            <param name="position0">First position to interpolate from.</param>
            <param name="tangent0">Tangent vector for the first position.</param>
            <param name="position1">Second position to interpolate from.</param>
            <param name="tangent1">Tangent vector for the second position.</param>
            <param name="t">Interpolating control factor for the corresponding components of the position.</param>
            <returns>Returns a vector containing the interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.CatmullRom(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation, using the specified position vectors.
            </summary>
            <param name="position0">The first position.</param>
            <param name="position1">The second position.</param>
            <param name="position2">The third position.</param>
            <param name="position3">The fourth position.</param>
            <param name="t">The interpolating control factor.</param>
            <returns>Returns the results of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.CatmullRomV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Performs a Catmull-Rom interpolation, using the specified position vectors.
            </summary>
            <param name="position0">The first position.</param>
            <param name="position1">The second position.</param>
            <param name="position2">The third position.</param>
            <param name="position3">The fourth position.</param>
            <param name="t">The interpolating control factor for the corresponding components of the position.</param>
            <returns>Returns the results of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.BaryCentric(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single)">
            <summary>
            Returns a point in Barycentric coordinates, using the specified position vectors.
            </summary>
            <param name="position0">The first position.</param>
            <param name="position1">The second position.</param>
            <param name="position2">The third position.</param>
            <param name="f">The first weighting factor.</param>
            <param name="g">The second weighting factor.</param>
            <returns>Returns the Barycentric coordinates.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.BaryCentricV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Returns a point in Barycentric coordinates, using the specified position vectors.
            </summary>
            <param name="position0">The first position.</param>
            <param name="position1">The second position.</param>
            <param name="position2">The third position.</param>
            <param name="f">The first weighting factors.</param>
            <param name="g">The second weighting factors.</param>
            <returns>Returns the Barycentric coordinates.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Load(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555)">
            <summary>
            Loads an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/> into an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/>.
            </summary>
            <param name="value">The structure to load.</param>
            <returns>Returns a vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Equals(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ToArray">
            <summary>
            Convert a vector to an array of float.
            </summary>
            <returns>An array of float.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GetByIndex(System.Int32)">
            <summary>
            Gets the value of one component by index.
            </summary>
            <param name="index">The index of the component.</param>
            <returns>The component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SetByIndex(System.Single,System.Int32)">
            <summary>
            Sets the value of one component by index.
            </summary>
            <param name="value">The value of the component.</param>
            <param name="index">The index of the component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.GetIntByIndex(System.Int32)">
            <summary>
            Gets the value of one component by index.
            </summary>
            <param name="index">The index of the component.</param>
            <returns>The component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SetIntByIndex(System.UInt32,System.Int32)">
            <summary>
            Sets the value of one component by index.
            </summary>
            <param name="value">The value of the component.</param>
            <param name="index">The index of the component.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ConvertIntToFloat(System.UInt32)">
            <summary>
            Converts an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>int</c> components to an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>float</c> components and applies a uniform bias.
            </summary>
            <param name="divExponent">Each component of the vector will be converted to a float and then divided by two raised to the <paramref name="divExponent"/> power.</param>
            <returns>Returns the converted vector, where each component has been divided by two raised to the <paramref name="divExponent"/> power.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ConvertFloatToInt(System.UInt32)">
            <summary>
            Converts an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>float</c> components to an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>int</c> components and applies a uniform bias.
            </summary>
            <param name="mulExponent">Each component of the vector will be converted to a <c>int</c> and then multiplied by two raised to the <paramref name="mulExponent"/> power.</param>
            <returns>Returns the converted vector, where each component has been multiplied by two raised to the <paramref name="mulExponent"/> power.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ConvertUIntToFloat(System.UInt32)">
            <summary>
            Converts an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>uint</c> components to an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>float</c> components and applies a uniform bias.
            </summary>
            <param name="divExponent">Each component of the vector will be converted to a <c>float</c> and then divided by two raised to the <paramref name="divExponent"/> power.</param>
            <returns>Returns the converted vector, where each component has been divided by two raised to the <paramref name="divExponent"/> power.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ConvertFloatToUInt(System.UInt32)">
            <summary>
            Converts an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>float</c> components to an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> with <c>uint</c> components and applies a uniform bias.
            </summary>
            <param name="mulExponent">Each component of the vector will be converted to a <c>int</c> and then multiplied by two raised to the <paramref name="mulExponent"/> power.</param>
            <returns>Returns the converted vector, where each component has been multiplied by two raised to the <paramref name="mulExponent"/> power.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreInt(System.UInt32@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in a <c>uint</c>.
            </summary>
            <param name="destination">The data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreFloat(System.Single@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in a float.
            </summary>
            <param name="destination">The data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreInt2(System.UInt32[]@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in a 2-element <c>uint</c> array.
            </summary>
            <param name="destination">The data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreFloat2(JeremyAnsel.DirectX.DXMath.XMFloat2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat2"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreSInt2(JeremyAnsel.DirectX.DXMath.XMInt2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt2"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreUInt2(JeremyAnsel.DirectX.DXMath.XMUInt2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt2"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreInt3(System.UInt32[]@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in a 3-element <c>uint</c> array.
            </summary>
            <param name="destination">The data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreFloat3(JeremyAnsel.DirectX.DXMath.XMFloat3@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat3"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreSInt3(JeremyAnsel.DirectX.DXMath.XMInt3@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt3"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreUInt3(JeremyAnsel.DirectX.DXMath.XMUInt3@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt3"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreInt4(System.UInt32[]@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in a 4-element <c>uint</c> array.
            </summary>
            <param name="destination">The data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreFloat4(JeremyAnsel.DirectX.DXMath.XMFloat4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMFloat4"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreSInt4(JeremyAnsel.DirectX.DXMath.XMInt4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMInt4"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.StoreUInt4(JeremyAnsel.DirectX.DXMath.XMUInt4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.XMUInt4"/>.
            </summary>
            <param name="destination">The data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Swizzle(JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle,JeremyAnsel.DirectX.DXMath.XMSwizzle)">
            <summary>
            Swizzles a vector.
            </summary>
            <param name="e0">Index that describes which component of V to place in the x-component of the swizzled vector.</param>
            <param name="e1">Index that describes which component of V to place in the y-component of the swizzled vector.</param>
            <param name="e2">Index that describes which component of V to place in the z-component of the swizzled vector.</param>
            <param name="e3">Index that describes which component of V to place in the w-component of the swizzled vector.</param>
            <returns>Returns the swizzled vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Swizzle(JeremyAnsel.DirectX.DXMath.XMSwizzle[])">
            <summary>
            Swizzles a vector.
            </summary>
            <param name="elements">The swizzle indexes.</param>
            <returns>Returns the swizzled vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.RotateLeft(System.UInt32)">
            <summary>
            Rotates the vector left by a given number of 32-bit elements.
            </summary>
            <param name="elements">Number of 32-bit elements by which to rotate V left. This parameter must be 0, 1, 2, or 3.</param>
            <returns>Returns the rotated vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.RotateRight(System.UInt32)">
            <summary>
            Rotates the vector right by a given number of 32-bit elements.
            </summary>
            <param name="elements">Number of 32-bit elements by which to rotate V right. This parameter must be 0, 1, 2, or 3.</param>
            <returns>Returns the rotated  vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.InBounds(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the components of a given vector are within set bounds.
            </summary>
            <param name="bounds">Vector that determines the bounds.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.InBoundsR(JeremyAnsel.DirectX.DXMath.XMComparisonRecord@,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the components of a given vector are within certain bounds and sets a comparison value.
            </summary>
            <param name="record">A comparison value.</param>
            <param name="bounds">Vector that determines the bounds.</param>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.IsNaN">
            <summary>
            Performs a per-component NaN test on a vector.
            </summary>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.IsInfinite">
            <summary>
            Performs a per-component test for +/- infinity on a vector.
            </summary>
            <returns>Returns a vector containing the results of each component test.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Round">
            <summary>
            Rounds each component of a vector to the nearest integer.
            </summary>
            <returns>Returns a vector, each of whose components are rounded to the nearest integer.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Truncate">
            <summary>
            Rounds each component of a vector to the nearest integer value in the direction of zero.
            </summary>
            <returns>Returns a vector whose components are rounded to the nearest integer value in the direction of zero.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Floor">
            <summary>
            Computes the floor of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the floor of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Ceiling">
            <summary>
            Computes the ceiling of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the ceiling of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Clamp(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Clamps the components of a vector to a specified minimum and maximum range.
            </summary>
            <param name="min">Minimum range vector.</param>
            <param name="max">Maximum range vector.</param>
            <returns>Returns a vector whose components are clamped to the specified minimum and maximum values.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Saturate">
            <summary>
            Saturates each component of a vector to the range 0.0f to 1.0f.
            </summary>
            <returns>Returns a vector, each of whose components are saturated.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Plus">
            <summary>
            Performance an identity operation on a vector.
            </summary>
            <returns>Returns the vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Negate">
            <summary>
            Computes the negation of a vector.
            </summary>
            <returns>Returns the negation of the vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Scale(System.Single)">
            <summary>
            Scalar multiplies a vector by a floating-point value.
            </summary>
            <param name="factor">A scalar value.</param>
            <returns>Returns the scaled vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ReciprocalEst">
            <summary>
            Estimates the per-component reciprocal of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the reciprocal of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Reciprocal">
            <summary>
            Computes the per-component reciprocal of a vector.
            </summary>
            <returns>Returns a vector. Each component is the reciprocal of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SqrtEst">
            <summary>
            Estimates the per-component square root of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the square-root of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Sqrt">
            <summary>
            Computes the per-component square root of a vector.
            </summary>
            <returns>Returns a vector. Each component is the square-root of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ReciprocalSqrtEst">
            <summary>
            Estimates the per-component reciprocal square root of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the reciprocal square-root of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ReciprocalSqrt">
            <summary>
            Computes the per-component reciprocal square root of a vector.
            </summary>
            <returns>Returns a vector. Each component is the reciprocal square-root of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Exp2">
            <summary>
            Computes two raised to the power for each component.
            </summary>
            <returns>Returns a vector whose components are two raised to the power of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ExpE">
            <summary>
            Computes e (~2.71828) raised to the power for each component.
            </summary>
            <returns>Returns a vector whose components are e raised to the power of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Exp">
            <summary>
            Computes two raised to the power for each component.
            </summary>
            <returns>Returns a vector whose components are two raised to the power of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Log2">
            <summary>
            Computes the base two logarithm of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are base two logarithm of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.LogE">
            <summary>
            Computes the base e logarithm of each component of a vector. The base e logarithm is also known as the natural logarithm.
            </summary>
            <returns>Returns a vector whose components are base e logarithm of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Log">
            <summary>
            Computes the base two logarithm of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are base two logarithm of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Abs">
            <summary>
            Computes the absolute value of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the absolute value of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Sin">
            <summary>
            Computes the sine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the sine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SinEst">
            <summary>
            Estimates the sine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the sine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Cos">
            <summary>
            Computes the cosine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the cosine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.CosEst">
            <summary>
            Estimates the cosine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the cosine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SinCos(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Computes the sine and cosine of each component of a vector.
            </summary>
            <param name="sin">A vector, each of whose components is the sine of the corresponding component of V.</param>
            <param name="cos">A vector, each of whose components is the cosine of the corresponding component of V.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SinCosEst(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@)">
            <summary>
            Estimates the sine and cosine of each component of a vector.
            </summary>
            <param name="sin">A vector, each of whose components is an estimate of the sine of the corresponding component of V.</param>
            <param name="cos">A vector, each of whose components is an estimate of the cosine of the corresponding component of V.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Tan">
            <summary>
            Computes the tangent of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the tangent of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.TanEst">
            <summary>
            Estimates the tangent of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is an estimate of the tangent of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.SinH">
            <summary>
            Computes the hyperbolic sine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the hyperbolic sine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.CosH">
            <summary>
            Computes the hyperbolic cosine of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the hyperbolic cosine of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.TanH">
            <summary>
            Computes the hyperbolic tangent of each component of a vector.
            </summary>
            <returns>Returns a vector. Each component is the hyperbolic tangent of the corresponding component of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ASin">
            <summary>
            Computes the arcsine of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the arcsine of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ASinEst">
            <summary>
            Estimates the arcsine of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are estimates of the arcsine of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ACos">
            <summary>
            Computes the arccosine of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the arccosine of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ACosEst">
            <summary>
            Estimates the arccosine of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are estimates of the arccosine of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ATan">
            <summary>
            Computes the arctangent of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are the arctangent of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ATanEst">
            <summary>
            Estimates the arctangent of each component of a vector.
            </summary>
            <returns>Returns a vector whose components are estimates of the arctangent of the corresponding components of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMU565@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU565"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.Store(JeremyAnsel.DirectX.DXMath.PackedVector.XMU555@)">
            <summary>
            Stores an <see cref="T:JeremyAnsel.DirectX.DXMath.XMVector"/> in an <see cref="T:JeremyAnsel.DirectX.DXMath.PackedVector.XMU555"/>.
            </summary>
            <param name="value">The structure at which to store the data</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.IsNaN(System.Single)">
            <summary>
            Indicates if the value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.IsInfinite(System.Single)">
            <summary>
            Indicates if the value is infinite.
            </summary>
            <param name="value">The value.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.RoundToNearest(System.Single)">
            <summary>
            Rounds the value to nearest.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector.ScalarATanEst(System.Single)">
            <summary>
            Returns the arc tan of a scalar value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMVector2">
            <summary>
            The 2D vector functions provided by DirectXMath.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 2D vectors are equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 2D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.EqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 2D vectors are equal. In addition, this function returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 2D vectors are equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 2D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.EqualIntR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 2D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.NearEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is near another 2D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="epsilon">The tolerance value used for judging equality.</param>
            <returns>Returns true if the difference between components is less than Epsilon; returns false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 2D vectors are not equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 2D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.NotEqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether two vectors are not equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 2D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Greater(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is greater than another 2D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater than V2, and false otherwise. See the remarks section.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.GreaterR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is greater than another 2D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.GreaterOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is greater-than-or-equal-to another 2D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater-than-or-equal-to V2, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.GreaterOrEqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is greater-than-or-equal-to another 2D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Less(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is less than another 2D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less than V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.LessOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 2D vector is less-than-or-equal-to another 2D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less-than-or-equal to V2, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.InBounds(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the components of a 2D vector are within set bounds.
            </summary>
            <param name="v">The 2D vector to test.</param>
            <param name="bounds">The 2D vector that determines the bounds.</param>
            <returns>Returns true if both the x and y-components of V are within the set bounds, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 2D vector is a NaN.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is a NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 2D vector is positive or negative infinity.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is positive or negative infinity, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Dot(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the dot product between 2D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The dot product between V1 and V2 is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Cross(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the 2D cross product.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The 2D cross product is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.LengthSquare(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the square of the length of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns a vector. The square of the length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.ReciprocalLengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the reciprocal of the length of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the reciprocal of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.ReciprocalLength(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the reciprocal of the length of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns the reciprocal of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.LengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the length of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Length(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the length of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns a vector. The length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.NormalizeEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the normalized version of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns an estimate of the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Normalize(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Returns the normalized version of a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.ClampLength(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single)">
            <summary>
            Clamps the length of a 2D vector to a given range.
            </summary>
            <param name="v">The 2D vector.</param>
            <param name="lengthMin">Minimum clamp length.</param>
            <param name="lengthMax">Maximum clamp length.</param>
            <returns>Returns a 2D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.ClampLengthV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Clamps the length of a 2D vector to a given range.
            </summary>
            <param name="v">The 2D vector to clamp.</param>
            <param name="lengthMin">The 2D vector whose x and y-components are both equal to the minimum clamp length. The x and y-components must be greater-than-or-equal to zero.</param>
            <param name="lengthMax">The 2D vector whose x and y-components are both equal to the maximum clamp length. The x and y-components must be greater-than-or-equal to zero.</param>
            <returns>Returns a 2D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Reflect(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Reflects an incident 2D vector across a 2D normal vector.
            </summary>
            <param name="incident">The 2D incident vector to reflect.</param>
            <param name="normal">The 2D normal vector to reflect the incident vector across.</param>
            <returns>Returns the reflected incident angle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Refract(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Refracts an incident 2D vector across a 2D normal vector.
            </summary>
            <param name="incident">The 2D incident vector to refract.</param>
            <param name="normal">The 2D normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">The index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.RefractV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Refracts an incident 2D vector across a 2D normal vector.
            </summary>
            <param name="incident">The 2D incident vector to refract.</param>
            <param name="normal">The 2D normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">The 2D vector whose x and y-components are both equal to the index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Orthogonal(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes a vector perpendicular to a 2D vector.
            </summary>
            <param name="v">The 2D vector.</param>
            <returns>Returns the 2D vector orthogonal to V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.AngleBetweenNormalsEst(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the radian angle between two normalized 2D vectors.
            </summary>
            <param name="n1">The first vector.</param>
            <param name="n2">The second vector.</param>
            <returns>Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.AngleBetweenNormals(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the radian angle between two normalized 2D vectors.
            </summary>
            <param name="n1">The first vector.</param>
            <param name="n2">The second vector.</param>
            <returns>Returns a vector. The radian angle between N1 and N2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.AngleBetweenVectors(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the radian angle between two 2D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The radian angle between V1 and V2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.LinePointDistance(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the minimum distance between a line and a point.
            </summary>
            <param name="linePoint1">2D vector describing a first point on the line.</param>
            <param name="linePoint2">2D vector describing a second point on the line.</param>
            <param name="point">2D vector describing the reference point.</param>
            <returns>Returns a vector. The minimum distance between the line and the point is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.IntersectLine(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Finds the intersection of two lines.
            </summary>
            <param name="line1Point1">2D vector describing the first point on the first line.</param>
            <param name="line1Point2">2D vector describing a second point on the first line.</param>
            <param name="line2Point1">2D vector describing the first point on the second line.</param>
            <param name="line2Point2">2D vector describing a second point on the second line.</param>
            <returns>Returns the intersection point. If the lines are parallel, the returned vector will be a NaN. If the two lines are coincident, the returned vector will be positive infinity.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.Transform(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a 2D vector by a matrix.
            </summary>
            <param name="v">The 2D vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.TransformCoord(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a 2D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="v">The 2D vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector2.TransformNormal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the 2D vector normal by the given matrix.
            </summary>
            <param name="v">The 2D normal vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMVector3">
            <summary>
            The 3D vector functions provided by DirectXMath.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 3D vectors are equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 3D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.EqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 3D vectors are equal. In addition, this function returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 3D vectors are equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 3D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.EqualIntR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 3D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.NearEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="epsilon">Tolerance value used for judging equality.</param>
            <returns>Returns true if V1 is near V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 3D vectors are not equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 3D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.NotEqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether two 3D vectors are not equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 3D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Greater(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is greater than another 3D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater than V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.GreaterR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is greater than another 3D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.GreaterOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is greater-than-or-equal-to another 3D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater-than-or-equal-to V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.GreaterOrEqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is greater-than-or-equal-to another 3D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Less(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is less than another 3D vector.
            </summary>
            <param name="v1">The fist vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less than V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.LessOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 3D vector is less-than-or-equal-to another 3D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less-than-or-equal-to V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.InBounds(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the components of a 3D vector are within set bounds.
            </summary>
            <param name="v">The vector to test.</param>
            <param name="bounds">The vector that determines the bounds.</param>
            <returns>Returns true if both the x, y, and z-components of V are within the set bounds, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 3D vector is a NaN.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is a NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 3D vector is positive or negative infinity.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is positive or negative infinity, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Dot(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the dot product between 3D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The dot product between V1 and V2 is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Cross(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the cross product between two 3D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns the cross product of V1 and V2.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.LengthSquare(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the square of the length of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector. The square of the length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.ReciprocalLengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the reciprocal of the length of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the reciprocal of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.ReciprocalLength(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the reciprocal of the length of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector. The reciprocal of the length of V is replicated into each of the returned vector's components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.LengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the length of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Length(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the length of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector. The length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.NormalizeEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the normalized version of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns an estimate of the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Normalize(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Returns the normalized version of a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.ClampLength(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single)">
            <summary>
            Clamps the length of a 3D vector to a given range.
            </summary>
            <param name="v">The vector.</param>
            <param name="lengthMin">The minimum clamp length.</param>
            <param name="lengthMax">The maximum clamp length.</param>
            <returns>Returns a 3D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.ClampLengthV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Clamps the length of a 3D vector to a given range.
            </summary>
            <param name="v">The vector.</param>
            <param name="lengthMin">A 3D vector whose x, y, and z-components are equal to the minimum clamp length. The x, y, and z-components must be greater-than-or-equal to zero.</param>
            <param name="lengthMax">A 3D vector whose x, y, and z-components are equal to the maximum clamp length. The x, y, and z-components must be greater-than-or-equal to zero.</param>
            <returns>Returns a 3D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Reflect(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Reflects an incident 3D vector across a 3D normal vector.
            </summary>
            <param name="incident">The incident vector to reflect.</param>
            <param name="normal">The normal vector to reflect the incident vector across.</param>
            <returns>Returns the reflected incident angle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Refract(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Refracts an incident 3D vector across a 3D normal vector.
            </summary>
            <param name="incident">The incident vector to refract.</param>
            <param name="normal">The normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">The index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.RefractV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Refracts an incident 3D vector across a 3D normal vector.
            </summary>
            <param name="incident">The incident vector to refract.</param>
            <param name="normal">The normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">A vector whose x, y, and z-components are equal to the index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Orthogonal(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes a vector perpendicular to a 3D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a 3D vector orthogonal to V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.AngleBetweenNormalsEst(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the radian angle between two normalized 3D vectors.
            </summary>
            <param name="n1">The first normalized vector.</param>
            <param name="n2">The second normalized vector.</param>
            <returns>Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.AngleBetweenNormals(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the radian angle between two normalized 3D vectors.
            </summary>
            <param name="n1">The first normalized vector.</param>
            <param name="n2">The second normalized vector.</param>
            <returns>Returns a vector. The radian angle between N1 and N2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.AngleBetweenVectors(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the radian angle between two 3D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The radian angle between V1 and V2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.LinePointDistance(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the minimum distance between a line and a point.
            </summary>
            <param name="linePoint1">The first point on the line.</param>
            <param name="linePoint2">The second point on the line.</param>
            <param name="point">The reference point.</param>
            <returns>Returns a vector. The minimum distance between the line and the point is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.ComponentsFromNormal(JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector@,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Using a reference normal vector, splits a 3D vector into components that are parallel and perpendicular to the normal.
            </summary>
            <param name="parallel">The component of V that is parallel to Normal.</param>
            <param name="perpendicular">The component of V that is perpendicular to Normal.</param>
            <param name="v">The vector to break into components.</param>
            <param name="normal">The reference normal vector.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Rotate(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Rotates a 3D vector using a quaternion.
            </summary>
            <param name="v">The vector to rotate.</param>
            <param name="rotationQuaternion">The quaternion that describes the rotation to apply to the vector.</param>
            <returns>The rotated 3D vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.InverseRotate(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Rotates a 3D vector using the inverse of a quaternion.
            </summary>
            <param name="v">The vector to rotate.</param>
            <param name="rotationQuaternion">The quaternion that describes the inverse of the rotation to apply to the vector.</param>
            <returns>Returns the rotated 3D vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Transform(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a 3D vector by a matrix.
            </summary>
            <param name="v">The vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.TransformCoord(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a 3D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="v">The vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.TransformNormal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms the 3D vector normal by the given matrix.
            </summary>
            <param name="v">The normal vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Project(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Project a 3D vector from object space into screen space.
            </summary>
            <param name="v">The vector in object space that will be projected into screen space.</param>
            <param name="viewportX">Pixel coordinate of the upper-left corner of the viewport. Unless you want to render to a subset of the surface, this parameter can be set to 0.</param>
            <param name="viewportY">Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this parameter can be set to 0.</param>
            <param name="viewportWidth">Width dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the width dimension of the render-target surface.</param>
            <param name="viewportHeight">Height dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the height dimension of the render-target surface.</param>
            <param name="viewportMinZ">Together with ViewportMaxZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0f. Clipping is performed after applying the projection matrix.</param>
            <param name="viewportMaxZ">Together with MinZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0f. Clipping is performed after applying the projection matrix.</param>
            <param name="projection">Projection matrix.</param>
            <param name="view">View matrix.</param>
            <param name="world">World matrix.</param>
            <returns>Returns a vector in screen space.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector3.Unproject(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="v">The vector in screen space that will be projected into object space.</param>
            <param name="viewportX">Pixel coordinate of the upper-left corner of the viewport. Unless you want to render to a subset of the surface, this parameter can be set to 0.</param>
            <param name="viewportY">Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this parameter can be set to 0.</param>
            <param name="viewportWidth">Width dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the width dimension of the render-target surface.</param>
            <param name="viewportHeight">Height dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the height dimension of the render-target surface.</param>
            <param name="viewportMinZ">Together with ViewportMaxZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0f. Clipping is performed after applying the projection matrix.</param>
            <param name="viewportMaxZ">Together with MinZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0f. Clipping is performed after applying the projection matrix.</param>
            <param name="projection">Projection matrix.</param>
            <param name="view">View matrix.</param>
            <param name="world">World matrix.</param>
            <returns>Returns a vector in object space.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.DXMath.XMVector4">
            <summary>
            The 4D vector functions provided by DirectXMath.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Equal(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 4D vectors are equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 4D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.EqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 4D vectors are equal. In addition, this function returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.EqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 4D vectors are equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 4D vectors are equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.EqualIntR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 4D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.NearEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is near another 4D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="epsilon">The tolerance value used for judging equality.</param>
            <returns>Returns true if V1 is near V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.NotEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether two 4D vectors are not equal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 4D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.NotEqualInt(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Test whether two 4D vectors are not equal, treating each component as an unsigned integer.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if the 4D vectors are not equal and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Greater(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is greater than another 4D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater than V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.GreaterR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is greater than another 4D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.GreaterOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is greater-than-or-equal-to another 4D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is greater-than-or-equal-to V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.GreaterOrEqualR(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is greater-than-or-equal-to another 4D vector and returns a comparison value.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a comparison value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Less(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is less than another 4D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less than V2 and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.LessOrEqual(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether one 4D vector is less-than-or-equal-to another 4D vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns true if V1 is less-than-or-equal-to V2, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.InBounds(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether the components of a 4D vector are within set bounds.
            </summary>
            <param name="v">The vector to test.</param>
            <param name="bounds">The vector that determines the bounds.</param>
            <returns>Returns true if all of the components of V are within the set bounds, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.IsNaN(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 4D vector is a NaN.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is a NaN, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.IsInfinite(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Tests whether any component of a 4D vector is positive or negative infinity.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns true if any component of V is positive or negative infinity, and false otherwise.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Dot(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the dot product between 4D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The dot product between V1 and V2 is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Cross(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the 4D cross product.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="v3">The third vector.</param>
            <returns>Returns the 4D cross product of V1, V2, and V3.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.LengthSquare(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the square of the length of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector. The square of the length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.ReciprocalLengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the reciprocal of the length of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the reciprocal of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.ReciprocalLength(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the reciprocal of the length of a 4D vector.
            </summary>
            <param name="v">he vector.</param>
            <returns>Returns the reciprocal of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.LengthEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the length of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector, each of whose components are estimates of the length of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Length(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes the length of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns a vector. The length of V is replicated into each component.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.NormalizeEst(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the normalized version of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns an estimate of the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Normalize(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Returns the normalized version of a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns the normalized version of V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.ClampLength(JeremyAnsel.DirectX.DXMath.XMVector,System.Single,System.Single)">
            <summary>
            Clamps the length of a 4D vector to a given range.
            </summary>
            <param name="v">The vector.</param>
            <param name="lengthMin">The minimum clamp length.</param>
            <param name="lengthMax">The maximum clamp length.</param>
            <returns>Returns a 4D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.ClampLengthV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Clamps the length of a 4D vector to a given range.
            </summary>
            <param name="v">The vector.</param>
            <param name="lengthMin">A 4D vector, all of whose components are equal to the minimum clamp length. The components must be greater-than-or-equal to zero.</param>
            <param name="lengthMax">A 4D vector, all of whose components are equal to the maximum clamp length. The components must be greater-than-or-equal to zero.</param>
            <returns>Returns a 4D vector whose length is clamped to the specified minimum and maximum.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Reflect(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Reflects an incident 4D vector across a 4D normal vector.
            </summary>
            <param name="incident">The incident vector to reflect.</param>
            <param name="normal">The normal vector to reflect the incident vector across.</param>
            <returns>Returns the reflected incident angle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Refract(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,System.Single)">
            <summary>
            Refracts an incident 4D vector across a 4D normal vector.
            </summary>
            <param name="incident">The incident vector to refract.</param>
            <param name="normal">The normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">The index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.RefractV(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Refracts an incident 4D vector across a 4D normal vector.
            </summary>
            <param name="incident">The incident vector to refract.</param>
            <param name="normal">The normal vector to refract the incident vector through.</param>
            <param name="refractionIndex">A 4D vector, all of whose components are equal to the index of refraction.</param>
            <returns>Returns the refracted incident vector.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Orthogonal(JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Computes a vector perpendicular to a 4D vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>Returns the 4D vector orthogonal to V.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.AngleBetweenNormalsEst(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Estimates the radian angle between two normalized 4D vectors.
            </summary>
            <param name="n1">The first normalized vector.</param>
            <param name="n2">The second normalized vector.</param>
            <returns>Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.AngleBetweenNormals(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Compute the radian angle between two normalized 4D vectors.
            </summary>
            <param name="n1">The first normalized vector.</param>
            <param name="n2">The second normalized vector.</param>
            <returns>Returns a vector. The radian angle between N1 and N2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.AngleBetweenVectors(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMVector)">
            <summary>
            Compute the radian angle between two 4D vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>Returns a vector. The radian angle between V1 and V2 is replicated to each of the components.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.DXMath.XMVector4.Transform(JeremyAnsel.DirectX.DXMath.XMVector,JeremyAnsel.DirectX.DXMath.XMMatrix)">
            <summary>
            Transforms a 4D vector by a matrix.
            </summary>
            <param name="v">The vector.</param>
            <param name="m">The transformation matrix.</param>
            <returns>Returns the transformed vector.</returns>
        </member>
    </members>
</doc>
